node.date <- estimate.dates(rtdtree, vect, mu)
rtdtree$edge.length <- node.date[rtdtree$edge[,2]] - node.date[rtdtree$edge[,1]]
setwd("~/PycharmProjects/hiv-evolution-master/8_Dated_Trees")
write.tree(rtdtree, file=paste0(filename, "+.tree"))
}
get.range <- function(x) {
x = as.character(x)
items <- strsplit(x, '-')[[1]]
year <- items[1]
if (length(items) == 1) {
## year only
low <- as.Date(paste(year, '01', '01', sep='-'))
high <- as.Date(paste(year, '12', '31', sep='-'))
}
else if (length(items) == 2) {
## year and month
month <- items[2]
# determine number of days in this month
days <- n.days(year, month)
low <- as.Date(paste(year, month, '01', sep='-'))
high <- as.Date(paste(year, month, days, sep='-'))
}
else {
# year, month, day
days <- items[3]
month <- items[2]
low <- as.Date(paste(year, month, days, sep='-'))
high <- low
}
return (c(low, high))
}
View(get.range)
View(get.range)
n.days <- function(year, month) {
# @param year: string (number) or integer for full year, e.g., '1997'
# @param month: string (number) or integer for month
start <- as.Date(paste(year, month, '01', sep='-'))
if (month == '12') {
# increment to start of next year
end <- as.Date(paste(as.integer(year)+1, '01', '01', sep='-'))
} else {
end <- as.Date(paste(year, as.integer(month)+1, '01', sep='-'))
}
return(as.integer(difftime(end, start)))
}
function(lo, hi){
mid <- as.Date(lo) + as.integer(as.Date(hi)-as.Date(lo))/2
return (mid)
}
fix(mid.date)
fix(mid.date)
dfolder <- list.files(path="~/PycharmProjects/hiv-evolution-master/Dates_edit/",full.names=FALSE)
tfolder <- list.files(path="~/PycharmProjects/hiv-evolution-master/7_1Trees/", full.names=FALSE)
for (i in 1:length(tfolder)){
setwd("~/")
tre <- read.tree(paste("~/PycharmProjects/hiv-evolution-master/7_1Trees",tfolder[i],sep="/"))
dates <- read.csv(paste("~/PycharmProjects/hiv-evolution-master/Dates_edit",dfolder[i],sep="/"), header=FALSE)
filename <- strsplit(tfolder[i], "\\+")[[1]][1]
names(dates) <- c('accno', 'date')
temp <- NULL
for (i in 1:nrow(dates)){
dtx <- get.range(dates$date[i])
mid <- mid.date(dtx[1],dtx[2])
middate <- 1970 + as.double(as.Date(mid))/365.25
temp <- rbind(temp, data.frame(accno=dates$accno[i],date=middates))
}
#rearranges the temp file to be in the same order as the tree
index <- match(tre$tip.label, temp$accno)
temp <- temp[index,]
vect <- c()
for (n in 1:nrow(temp)){
vect[n] <- temp$date[n]
}
rtdtree <- rtt(tre, vect, ncpu = 6)
mu <- estimate.mu(rtdtree, vect, p.tol = 0.05)
node.date <- estimate.dates(rtdtree, vect, mu)
rtdtree$edge.length <- node.date[rtdtree$edge[,2]] - node.date[rtdtree$edge[,1]]
setwd("~/PycharmProjects/hiv-evolution-master/8_Dated_Trees")
write.tree(rtdtree, file=paste0(filename, "+.tree"))
}
dfolder <- list.files(path="~/PycharmProjects/hiv-evolution-master/Dates_edit/",full.names=FALSE)
tfolder <- list.files(path="~/PycharmProjects/hiv-evolution-master/7_1Trees/", full.names=FALSE)
for (i in 1:length(tfolder)){
setwd("~/")
tre <- read.tree(paste("~/PycharmProjects/hiv-evolution-master/7_1Trees",tfolder[i],sep="/"))
dates <- read.csv(paste("~/PycharmProjects/hiv-evolution-master/Dates_edit",dfolder[i],sep="/"), header=FALSE)
filename <- strsplit(tfolder[i], "\\+")[[1]][1]
names(dates) <- c('accno', 'date')
temp <- NULL
for (i in 1:nrow(dates)){
dtx <- get.range(dates$date[i])
mid <- mid.date(dtx[1],dtx[2])
middate <- 1970 + as.double(as.Date(mid))/365.25
temp <- rbind(temp, data.frame(accno=dates$accno[i],date=middate))
}
#rearranges the temp file to be in the same order as the tree
index <- match(tre$tip.label, temp$accno)
temp <- temp[index,]
vect <- c()
for (n in 1:nrow(temp)){
vect[n] <- temp$date[n]
}
rtdtree <- rtt(tre, vect, ncpu = 6)
mu <- estimate.mu(rtdtree, vect, p.tol = 0.05)
node.date <- estimate.dates(rtdtree, vect, mu)
rtdtree$edge.length <- node.date[rtdtree$edge[,2]] - node.date[rtdtree$edge[,1]]
setwd("~/PycharmProjects/hiv-evolution-master/8_Dated_Trees")
write.tree(rtdtree, file=paste0(filename, "+.tree"))
}
names(dates) <- c('accno', 'date')
dfolder <- list.files(path="~/PycharmProjects/hiv-evolution-master/Dates_edit/",full.names=FALSE)
tfolder <- list.files(path="~/PycharmProjects/hiv-evolution-master/7_1Trees/", full.names=FALSE)
for (i in 1:length(tfolder)){
setwd("~/")
tre <- read.tree(paste("~/PycharmProjects/hiv-evolution-master/7_1Trees",tfolder[i],sep="/"))
dates <- read.csv(paste("~/PycharmProjects/hiv-evolution-master/Dates_edit",dfolder[i],sep="/"), header=FALSE)
filename <- strsplit(tfolder[i], "\\+")[[1]][1]
names(dates) <- c('accno', 'date')
temp <- NULL
for (i in 1:nrow(dates)){
dtx <- get.range(dates$date[i])
mid <- mid.date(dtx[1],dtx[2])
middate <- 1970 + as.double(as.Date(mid))/365.25
temp <- rbind(temp, data.frame(accno=dates$accno[i],date=middate))
}
#rearranges the temp file to be in the same order as the tree
index <- match(tre$tip.label, temp$accno)
temp <- temp[index,]
vect <- c()
for (n in 1:nrow(temp)){
vect[n] <- temp$date[n]
}
# rtdtree <- rtt(tre, vect, ncpu = 6)
#
# mu <- estimate.mu(rtdtree, vect, p.tol = 0.05)
#
# node.date <- estimate.dates(rtdtree, vect, mu)
#
# rtdtree$edge.length <- node.date[rtdtree$edge[,2]] - node.date[rtdtree$edge[,1]]
#
# setwd("~/PycharmProjects/hiv-evolution-master/8_Dated_Trees")
#
# write.tree(rtdtree, file=paste0(filename, "+.tree"))
}
View(get.range)
dates
tre
tfolder
dfolder
temp <- NULL
for (i in 1:nrow(dates)){
dtx <- get.range(dates$date[i])
mid <- mid.date(dtx[1],dtx[2])
middate <- 1970 + as.double(as.Date(mid))/365.25
temp <- rbind(temp, data.frame(accno=dates$accno[i],date=middate))
}
#rearranges the temp file to be in the same order as the tree
index <- match(tre$tip.label, temp$accno)
temp <- temp[index,]
vect <- c()
for (n in 1:nrow(temp)){
vect[n] <- temp$date[n]
}
rtdtree <- rtt(tre, vect, ncpu = 6)
dates
tre
tre <- read.tree("~/PycharmProjects/hiv-evolution-master/7_1Trees/BF1+.tree")
tre
dates <- read.csv("~/PycharmProjects/hiv-evolution-master/Dates_edit/BF1_dates.txt", header=FALSE)
dates
temp <- NULL
for (i in 1:nrow(dates)){
dtx <- get.range(dates$date[i])
mid <- mid.date(dtx[1],dtx[2])
middate <- 1970 + as.double(as.Date(mid))/365.25
temp <- rbind(temp, data.frame(accno=dates$accno[i],date=middate))
}
#rearranges the temp file to be in the same order as the tree
index <- match(tre$tip.label, temp$accno)
temp <- temp[index,]
vect <- c()
for (n in 1:nrow(temp)){
vect[n] <- temp$date[n]
}
rtdtree <- rtt(tre, vect, ncpu = 6)
temp <- NULL
for (i in 1:nrow(dates)){
dtx <- get.range(dates$date[i])
mid <- mid.date(dtx[1],dtx[2])
middate <- 1970 + as.double(as.Date(mid))/365.25
temp <- rbind(temp, data.frame(accno=dates$accno[i],date=middate))
}
temp <- NULL
for (i in 1:nrow(dates)){
dtx <- get.range(dates$date[i])
mid <- mid.date(dtx[1],dtx[2])
middate <- 1970 + as.double(as.Date(mid))/365.25
temp <- rbind(temp, data.frame(accno=dates$accno[i],date=middate))
}
dates
tre
mid.date <- function(lo, hi){
mid <- as.Date(lo) + as.integer(as.Date(hi)-as.Date(lo))/2
return (mid)
}
n.days <- function(year, month) {
# @param year: string (number) or integer for full year, e.g., '1997'
# @param month: string (number) or integer for month
start <- as.Date(paste(year, month, '01', sep='-'))
if (month == '12') {
# increment to start of next year
end <- as.Date(paste(as.integer(year)+1, '01', '01', sep='-'))
} else {
end <- as.Date(paste(year, as.integer(month)+1, '01', sep='-'))
}
return(as.integer(difftime(end, start)))
}
get.range <- function(x) {
x = as.character(x)
items <- strsplit(x, '-')[[1]]
year <- items[1]
if (length(items) == 1) {
## year only
low <- as.Date(paste(year, '01', '01', sep='-'))
high <- as.Date(paste(year, '12', '31', sep='-'))
}
else if (length(items) == 2) {
## year and month
month <- items[2]
# determine number of days in this month
days <- n.days(year, month)
low <- as.Date(paste(year, month, '01', sep='-'))
high <- as.Date(paste(year, month, days, sep='-'))
}
else {
# year, month, day
days <- items[3]
month <- items[2]
low <- as.Date(paste(year, month, days, sep='-'))
high <- low
}
return (c(low, high))
}
require(ape)
load("~/workspace2.RData")
tre <- read.tree(text='(((A:1.1,B:1.2):0.1,(C:1.3,D:1.4):0.2):0.3,E:1.5):0.4;')
require(ape)
tre <- read.tree(text='(((A:1.1,B:1.2):0.1,(C:1.3,D:1.4):0.2):0.3,E:1.5):0.4;')
n <- length(tre$tip.label)  # Ntip(tre)
n
n <- Ntip(tre) # Ntip(tre)
n
tre <- read.tree(text='(((A:1.1,B:1.2):0.1,(C:1.3,D:1.4):0.2):0.3,E:1.5):0.4;')
n <- Ntip(tre)
# number of tips per internal node
numtips <- tabulate(tre$edge[,1][tre$edge[,2] <= n])
numtips
tre$edge
numtips
is.cherry <- sapply(numtips, function(x) x==2)
is.cherry
is.cherry[[1]][1]
is.cherry[1]
is.cherry[2]
is.cherry[9]
is.cherry[[9]]
which(is.cherry)
m <- sapply(which(is.cherry), function(i) {
edge.idx <- tre$edge[,1]==i  # select rows in edge matrix with parent node index
c(i,   # index of the parent node
which(edge.idx),
t(     # transpose so we can concatenate this vector to i
tre$edge[edge.idx, 2]    # column of tip indices
)
)
})
m
is.cherry
edge.idx
?sapply
edge.idx <- tre$edge[,1]==8
edge.idx
plot(tre)
edge.idx <- tre$edge[,1]==9
edge.idx
?t()
df <- data.frame(node.index=m[1,], edge1=m[2,], edge2=m[3,], tip1=m[4,], tip2=m[5,])
df
t(3,4,5,)
t(3,4,5)
t(3:10)
c(3:10)
t(     # transpose so we can concatenate this vector to i
tre$edge[edge.idx, 2]    # column of tip indices
)
edge.idx
edge.idx <- tre$edge[,1]==8
t(     # transpose so we can concatenate this vector to i
tre$edge[edge.idx, 2]    # column of tip indices
)
t(     # transpose so we can concatenate this vector to i
tre$edge[edge.idx, 2]    # column of tip indices
)
plot(trte)
plot(trre)
plot(tre)
tre$edge
m
tre$tip.label(1)
tre$tip.label[1]
tre$tip.label[2]
tre$tip.label[3]
tre$tip.label[4]
tre$tip.label[5]
tre$tip.label[6]
df
numtips
is.cherry
which(is.cherry)
?tabulate
c(3:22)
x <- c(3:22)
tabulate(x)
x <- c(3:7, 37:30)
tabulate(x)
something <- tre$edge[,1]==9
something
df
m <- sapply(which(is.cherry), function(i) { #will input the numbers of nodes containing 2 tips
# FINDS THE EDGES (row #) corresponding with the parent node ; ap: select rows in edge matrix with parent node index
c(i,   # index of the parent node
which(tre$edge[,1]==i),
t(     # transpose so we can concatenate this vector to i
tre$edge[edge.idx, 2]    # column of tip indices
)
)
})
df
df$tip1.label <- tre$tip.label[df$tip1]
df$tip2.label <- tre$tip.label[df$tip2]
df$tip1.len <- tre$edge.length[df$edge1]
df$tip2.len <- tre$edge.length[df$edge2]
df
tfolder <- list.files(path="~/PycharmProjects/hiv-evolution-master/8_1_Trees", full.names=TRUE)
vfolder <- list.files(path="~/PycharmProjects/hiv-evolution-master/3RegionSequences/VRegions", full.names=TRUE)
vfolder
tfolder
require(ape)
tfolder
vfolder
vfolder <- list.files(path="~/PycharmProjects/hiv-evolution-master/3RegionSequences/VRegions2", full.names=TRUE)
vfolder
tfolder
csv <- read.csv(vfolder[5], header=FALSE)
names(csv) <- c('accno', 'VR1', 'VR2','VR3', 'VR4', 'VR5')
csv
is.cherry
tre <- read.tree(tfolder[5])
n <- Ntip(tre)
n
tre$edge
plot(tre)
numtips <- tabulate(tre$edge[,1][tre$edge[,2] <= n])
numtips
tre$tip.label[22]
tre$tip.label[9]
tre$tip.label[10]
tre$tip.label[5]
tre$tip.label[6]
is.cherry <- sapply(numtips, function(x) x==2)
is.cherry
which(is.cherry)
m <- sapply(which(is.cherry), function(i) { #will input the numbers of nodes containing 2 tips?
edge.idx <- tre$edge[,1]==i  # FINDS THE EDGES (row #) corresponding with the parent node ; ap: select rows in edge matrix with parent node index
c(i,   # index of the parent node
which(edge.idx),
t(     # transpose so we can concatenate this vector to i
tre$edge[edge.idx, 2]    # column of tip indices
)
)
})
m
df <- data.frame(node.index=m[1,], edge1=m[2,], edge2=m[3,], tip1=m[4,], tip2=m[5,])
# to add additional columns, use '$' operator
df$tip1.label <- tre$tip.label[df$tip1]
df$tip2.label <- tre$tip.label[df$tip2]
df$tip1.len <- tre$edge.length[df$edge1]
df$tip2.len <- tre$edge.length[df$edge2]
df
tre$edge.length
?match
save.image("~/workspace2.RData")
require(ape)
setwd("~/PycharmProjects/hiv-evolution-master/9_indels")
tfolder <- list.files(path="~/PycharmProjects/hiv-evolution-master/8_1_Trees", full.names=TRUE)
vfolder <- list.files(path="~/PycharmProjects/hiv-evolution-master/3RegionSequences/VRegions2", full.names=TRUE)
tre <- read.tree(tfolder[4])
csv <- read.csv(vfolder[4], header=FALSE)
names(csv) <- c('accno', 'VR1', 'VR2','VR3', 'VR4', 'VR5')
n <- Ntip(tre)
numtips <- tabulate(tre$edge[,1][tre$edge[,2] <= n])
#determines which nodes contain cherries (returns vector with their integer positions)
is.cherry <- sapply(numtips, function(x) x==2)
#vect = c()
m <- sapply(which(is.cherry), function(i) { #will input the numbers of nodes containing 2 tips?
edge.idx <- tre$edge[,1]==i  # FINDS THE EDGES (row #) corresponding with the parent node ; ap: select rows in edge matrix with parent node index
c(i,   # index of the parent node
which(edge.idx),
t(     # transpose so we can concatenate this vector to i
tre$edge[edge.idx, 2]    # column of tip indices
)
)
})
df <- data.frame(node.index=m[1,], edge1=m[2,], edge2=m[3,], tip1=m[4,], tip2=m[5,])
# to add additional columns, use '$' operator
df$tip1.label <- tre$tip.label[df$tip1]
df$tip2.label <- tre$tip.label[df$tip2]
df$tip1.len <- tre$edge.length[df$edge1]
df$tip2.len <- tre$edge.length[df$edge2]
df
indels <- df[,c(6:9)]
indels
for (i in 1:nrow(indels)){
idxA <- match(indels$tip1.label[i], csv$accno)
idxB <- match(indels$tip2.label[i], csv$accno)
for (t in 2:ncol(csv)){
Avr <- as.character(csv[idxA,t])
Bvr <- as.character(csv[idxB,t])
diff <- paste0("VR",as.character(t-1),".indel")
nt <- paste0("VR",as.character(t-1),".nt")
Alength <- nchar(Avr)
Blength <- nchar(Bvr)
indels[i,diff] <- Alength != Blength
indels[i,nt] <- abs(Alength - Blength)
}
}
indels
name <- strsplit(tfolder[4], "/")[[1]][7]
filename <- paste0(strsplit(name, "\\+")[[1]][1], ".csv" )
filename
name
write.csv(indels, filename)
which(is.cherry)
tre$edge
edge.idx
tre$edge
m
which(is.cherry)
edge.idx
for (i in 1:length(tfolder)){
tre <- read.tree(tfolder[i])
csv <- read.csv(vfolder[i], header=FALSE)
names(csv) <- c('accno', 'VR1', 'VR2','VR3', 'VR4', 'VR5')
n <- Ntip(tre)
# number of tips per internal node
# count the number of instances that first column (node) corresponds to a second column number which is <= n (meaning it is a tip)
numtips <- tabulate(tre$edge[,1][tre$edge[,2] <= n])
#determines which nodes contain cherries (returns vector with their integer positions)
is.cherry <- sapply(numtips, function(d) d==2)
#vect = c()
#for (x in 1:length(numtips)){
#  if (numtips[x] == 2){
#    vect <- c(vect, x)
#  }
#}
# get row indices for edges from each cherry
# construct data frame where each row corresponds to a cherry
m <- sapply(which(is.cherry), function(a) { #will input the numbers of nodes containing 2 tips?
edge.idx <- tre$edge[,1]==a  # FINDS THE EDGES (row #) corresponding with the parent node ; ap: select rows in edge matrix with parent node index
c(a,   # index of the parent node
which(edge.idx),
t(     # transpose so we can concatenate this vector to i
tre$edge[edge.idx, 2]    # column of tip indices
)
)
})
df <- data.frame(node.index=m[1,], edge1=m[2,], edge2=m[3,], tip1=m[4,], tip2=m[5,])
# to add additional columns, use '$' operator
df$tip1.label <- tre$tip.label[df$tip1]
df$tip2.label <- tre$tip.label[df$tip2]
df$tip1.len <- tre$edge.length[df$edge1]
df$tip2.len <- tre$edge.length[df$edge2]
indels <- df[,c(6:9)]
for (x in 1:nrow(indels)){
idxA <- match(indels$tip1.label[x], csv$accno)
idxB <- match(indels$tip2.label[x], csv$accno)
for (t in 2:ncol(csv)){
Avr <- as.character(csv[idxA,t])
Bvr <- as.character(csv[idxB,t])
diff <- paste0("VR",as.character(t-1),".indel")
nt <- paste0("VR",as.character(t-1),".nt")
Alength <- nchar(Avr)
Blength <- nchar(Bvr)
indels[x,diff] <- Alength != Blength
indels[x,nt] <- abs(Alength - Blength)
}
}
name <- strsplit(tfolder[i], "/")[[1]][7]
filename <- paste0(strsplit(name, "\\+")[[1]][1], ".csv" )
write.csv(indels, filename)
}
csvfolder <- list.files(path="~/PycharmProjects/hiv-evolution-master/9_indels")
print(csvfolder)
csv <- read.csv(csvfolder[4])
print(csv)
csv <- read.csv(csvfolder[4])
csv$length <- csv$tip1.len + csv$tip1.len
csv
fit <- glm(!csv$VR1.indel ~ csv$length, family= 'binomial')
fit <- glm(!csv$VR1.indel ~ csv$length, family= 'binomial')
fit
summary(fit)
