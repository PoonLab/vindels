temp <- as.data.frame.matrix(table(ngTotal[which(ngTotal$vloop==n),c(1,3)]))
prop <- temp/rowSums(temp)
bool <- temp < 0.10*rowSums(temp)
col <- colors[((n*3)-2):(n*3)]
r <- col[1]
g <- col[2]
b <- col[3]
#vertical line segments
segments((n*7)+0.5,8.5,(n*7)+0.5,-1.4,lwd=3)
#iterate through all possible positions in the 7x9 grid, check for the proportion and draw the color density with it
for (x in 1:7){
text(22+(x*1.5),-2, labels=clades[x])
for (y in 1:9){
if (!is.null(prop[x,y])){
alv <- prop[x,y]
}else{
alv <- 0.00
}
#boxes for the whole plot
rect(((n-1)*7)+x-0.5, y-1.5,((n-1)*7)+x+0.5,y-0.5, col=alpha(colors[n],alv),lwd=0.8)
#for low density boxes
if(!is.null(prop[x,y]) && isTRUE(bool[x,y]) && temp[x,y] > 1){
text(((n-1)*7)+x,y-1,labels=temp[x,y],col=colors[n], cex=0.8) #colors[n] #rgb(r,g,b)
}
}
}
}
higher <- data.frame(x=c(1,11,18,19,23,24,25),y=c(3,2,1,1,3,3,3))
for (i in 1:7){
text(higher[i,1],(higher[i,2]-0.2),labels="*",cex=1.7)
arrows(higher[i,1],higher[i,2],higher[i,1],(higher[i,2]+0.25), length=0.07, lwd=1.5)
}
lower <- data.frame(x=c(33,28),y=c(1,3))
for (i in 1:2){
text(lower[i,1],(lower[i,2]+0.2),labels="*",cex=1.7)
arrows(lower[i,1],lower[i,2],lower[i,1],(lower[i,2]-0.25), length=0.07, lwd=1.5)
}
#NGS Plot #2
par(mar=c(8,4,2,2), pty="m")
plot(1:8,c(0,2,4,5,7,8,8,8),cex=0, ylim=c(-0.5,8.5),xlim=c(1,35), xaxt='n',yaxt='n',
main=NULL,xlab="", ylab="", cex.lab=1.7,cex.main=2, bty='n')
title(xlab="V-Loop / Subtype", line=4, cex.lab=1.5)
title(ylab="Number of N-linked Glycosylation Sites", line=1.7, cex.lab=1.5)
par(las=1)
axis(1,at=c(1:35),lab=rep(clades,5), line=-1.8, tick=F,cex.axis=0.7)
axis(1,at=c(4,11,18,25,32), lab=c("V1","V2","V3","V4","V5"),line=0,tick=F,cex.axis=1.2)
par(las=2)
axis(2, at=0:8,pos=0.5,cex.axis=1.2)
par(xpd=NA)
#x axis vertical line
segments(0.5,8.5,0.5,-1.4,lwd=2.5)
#color legend bottom left hand corner
rect(0.5,-2.8,1.5,-1.8, col=alpha(colors[1],0.25),lwd=0.8)
rect(2.5,-2.8,3.5,-1.8, col=alpha(colors[1],0.5),lwd=0.8)
rect(4.5,-2.8,5.5,-1.8, col=alpha(colors[1],0.75),lwd=0.8)
rect(6.5,-2.8,7.5,-1.8, col=alpha(colors[1],1),lwd=0.8)
text(1,-3, labels="25%")
text(3,-3, labels="50%")
text(5,-3, labels="75%")
text(7,-3, labels="100%")
#bright color scheme
#colors <- c(1,0,0,0,0.5,1,0,1,0,1,0,0.8,1,0.5,0)
#moderate color scheme
require(RColorBrewer)
colors <- brewer.pal(5, 'Set1')
require(plotrix)
require(scales)
full.df <- data.frame(stringsAsFactors = F)
for (n in 1:5){
temp <- as.data.frame.matrix(table(ngTotal[which(ngTotal$vloop==n),c(1,3)]))
prop <- temp/rowSums(temp)
bool <- temp < 0.10*rowSums(temp)
col <- colors[((n*3)-2):(n*3)]
r <- col[1]
g <- col[2]
b <- col[3]
#vertical line segments
segments((n*7)+0.5,8.5,(n*7)+0.5,-1.4,lwd=3)
#iterate through all possible positions in the 7x9 grid, check for the proportion and draw the color density with it
for (x in 1:7){
text(22+(x*1.5),-2, labels=clades[x])
for (y in 1:9){
if (!is.null(prop[x,y])){
alv <- prop[x,y]
}else{
alv <- 0.00
}
#boxes for the whole plot
rect(((n-1)*7)+x-0.5, y-1.5,((n-1)*7)+x+0.5,y-0.5, col=alpha(colors[n],alv),lwd=0.8)
#for low density boxes
if(!is.null(prop[x,y]) && isTRUE(bool[x,y]) && temp[x,y] > 1){
text(((n-1)*7)+x,y-1,labels=temp[x,y],col=colors[n], cex=0.8) #colors[n] #rgb(r,g,b)
}
}
}
}
higher <- data.frame(x=c(1,11,18,19,23,24,25),y=c(3,2,1,1,3,3,3))
for (i in 1:7){
text(higher[i,1],(higher[i,2]-0.2),labels="*",cex=1.7)
arrows(higher[i,1],higher[i,2],higher[i,1],(higher[i,2]+0.25), length=0.07, lwd=1.5)
}
lower <- data.frame(x=c(33,28),y=c(1,3))
for (i in 1:2){
text(lower[i,1],(lower[i,2]+0.2),labels="*",cex=1.7)
arrows(lower[i,1],lower[i,2],lower[i,1],(lower[i,2]-0.25), length=0.07, lwd=1.5)
}
#NGS Plot #2
par(mar=c(8,4,2,2), pty="m")
plot(1:8,c(0,2,4,5,7,8,8,8),cex=0, ylim=c(-0.5,8.5),xlim=c(1,35), xaxt='n',yaxt='n',
main=NULL,xlab="", ylab="", cex.lab=1.7,cex.main=2, bty='n')
title(xlab="V-Loop / Subtype", line=4, cex.lab=1.5)
title(ylab="Number of N-linked Glycosylation Sites", line=1.7, cex.lab=1.5)
par(las=1)
axis(1,at=c(1:35),lab=rep(clades,5), line=-1.8, tick=F,cex.axis=0.7)
axis(1,at=c(4,11,18,25,32), lab=c("V1","V2","V3","V4","V5"),line=0,tick=F,cex.axis=1.2)
par(las=2)
axis(2, at=0:8,pos=0.5,cex.axis=1.2)
par(xpd=NA)
#x axis vertical line
segments(0.5,8.5,0.5,-1.4,lwd=2.5)
#color legend bottom left hand corner
rect(0.5,-2.8,1.5,-1.8, col=alpha(colors[1],0.25),lwd=0.8)
rect(2.5,-2.8,3.5,-1.8, col=alpha(colors[1],0.5),lwd=0.8)
rect(4.5,-2.8,5.5,-1.8, col=alpha(colors[1],0.75),lwd=0.8)
rect(6.5,-2.8,7.5,-1.8, col=alpha(colors[1],1),lwd=0.8)
text(1,-3, labels="25%")
text(3,-3, labels="50%")
text(5,-3, labels="75%")
text(7,-3, labels="100%")
#bright color scheme
#colors <- c(1,0,0,0,0.5,1,0,1,0,1,0,0.8,1,0.5,0)
#moderate color scheme
require(RColorBrewer)
colors <- brewer.pal(5, 'Set1')
require(plotrix)
require(scales)
full.df <- data.frame(stringsAsFactors = F)
for (n in 1:5){
temp <- as.data.frame.matrix(table(ngTotal[which(ngTotal$vloop==n),c(1,3)]))
prop <- temp/rowSums(temp)
bool <- temp < 0.10*rowSums(temp)
col <- colors[((n*3)-2):(n*3)]
r <- col[1]
g <- col[2]
b <- col[3]
#vertical line segments
segments((n*7)+0.5,8.5,(n*7)+0.5,-1.4,lwd=3)
#iterate through all possible positions in the 7x9 grid, check for the proportion and draw the color density with it
for (x in 1:7){
text(24+(x*1.5),-2, labels=clades[x])
for (y in 1:9){
if (!is.null(prop[x,y])){
alv <- prop[x,y]
}else{
alv <- 0.00
}
#boxes for the whole plot
rect(((n-1)*7)+x-0.5, y-1.5,((n-1)*7)+x+0.5,y-0.5, col=alpha(colors[n],alv),lwd=0.8)
#for low density boxes
if(!is.null(prop[x,y]) && isTRUE(bool[x,y]) && temp[x,y] > 1){
text(((n-1)*7)+x,y-1,labels=temp[x,y],col=colors[n], cex=0.8) #colors[n] #rgb(r,g,b)
}
}
}
}
higher <- data.frame(x=c(1,11,18,19,23,24,25),y=c(3,2,1,1,3,3,3))
for (i in 1:7){
text(higher[i,1],(higher[i,2]-0.2),labels="*",cex=1.7)
arrows(higher[i,1],higher[i,2],higher[i,1],(higher[i,2]+0.25), length=0.07, lwd=1.5)
}
lower <- data.frame(x=c(33,28),y=c(1,3))
for (i in 1:2){
text(lower[i,1],(lower[i,2]+0.2),labels="*",cex=1.7)
arrows(lower[i,1],lower[i,2],lower[i,1],(lower[i,2]-0.25), length=0.07, lwd=1.5)
}
ngTotal
ngTotal[which(ngTotal$subtype=="B"),]
nrow(ngTotal[which(ngTotal$subtype=="B"),])
ngTotal
#HEAT MAP FIGURE
#contains the total counts of NG sites in all sequences
# format ----
ngTotal <- read.csv("~/PycharmProjects/hiv-evolution-master/ngTotal.csv", stringsAsFactors = F)
ngTotal
nrow(ngTotal[which(ngTotal$subtype=="B" & ngTotal$vloop==1),])
nrow(ngTotal[which(ngTotal$subtype=="B" & ngTotal$vloop==2),])
nrow(ngTotal[which(ngTotal$subtype=="B" & ngTotal$vloop==3),])
nrow(ngTotal[which(ngTotal$subtype=="B" & ngTotal$vloop==4),])
nrow(ngTotal[which(ngTotal$subtype=="B" & ngTotal$vloop==5),])
nrow(ngTotal[which(ngTotal$subtype=="B" & ngTotal$vloop==1),])
nrow(ngTotal[which(ngTotal$subtype=="AE" & ngTotal$vloop==1),])
tail(ngTotal)
nrow(ngTotal[which(ngTotal$subtype=="F1" & ngTotal$vloop==1),])
nrow(ngTotal[which(ngTotal$subtype=="F1" & ngTotal$vloop==2),])
nrow(ngTotal[which(ngTotal$subtype=="F1" & ngTotal$vloop==3),])
nrow(ngTotal[which(ngTotal$subtype=="F1" & ngTotal$vloop==4),])
nrow(ngTotal[which(ngTotal$subtype=="F1" & ngTotal$vloop==5),])
ngTotal[which(ngTotal$subtype=="F1" & ngTotal$vloop==5),]
ngTotal[which(ngTotal$subtype=="F1" & ngTotal$vloop==3),]
ngTotal[which(ngTotal$subtype=="F1" & ngTotal$vloop==1),]
#HEAT MAP FIGURE
#contains the total counts of NG sites in all sequences
# format ----
ngTotal <- read.csv("~/PycharmProjects/hiv-evolution-master/ngTotal.csv", stringsAsFactors = F)
ngTotal$accno <- NULL
v1 <- ngTotal[which(ngTotal$vloop==1),c(1,3)]
v2 <- ngTotal[which(ngTotal$vloop==2),c(1,3)]
v3 <- ngTotal[which(ngTotal$vloop==3),c(1,3)]
v4 <- ngTotal[which(ngTotal$vloop==4),c(1,3)]
v5 <- ngTotal[which(ngTotal$vloop==5),c(1,3)]
#stats analysis between subtypes
summary(glm(count ~ subtype, data = v5, family=poisson))
v1.df <- as.data.frame.matrix(table(v1))
v2.df <- as.data.frame.matrix(table(v2))
v3.df <- as.data.frame.matrix(table(v3))
v4.df <- as.data.frame.matrix(table(v4))
v5.df <- as.data.frame.matrix(table(v5))
v1.prop <- v1.df/rowSums(v1.df)
v2.prop <- v2.df/rowSums(v2.df)
v3.prop <- v3.df/rowSums(v3.df)
v4.prop <- v4.df/rowSums(v4.df)
v5.prop <- v5.df/rowSums(v5.df)
clades <- c("AE","AG","A1","B","C","D","F1")
sizes <- c(nrow(ngTotal[which(ngTotal$subtype=="01_AE" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="02_AG" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="A1" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="B" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="C" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="D" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="F1" & ngTotal$vloop==1),]))
#NGS Plot #2
par(mar=c(8,4,2,2), pty="m")
plot(1:8,c(0,2,4,5,7,8,8,8),cex=0, ylim=c(-0.5,8.5),xlim=c(1,35), xaxt='n',yaxt='n',
main=NULL,xlab="", ylab="", cex.lab=1.7,cex.main=2, bty='n')
title(xlab="V-Loop / Subtype", line=4, cex.lab=1.5)
title(ylab="Number of N-linked Glycosylation Sites", line=1.7, cex.lab=1.5)
par(las=1)
axis(1,at=c(1:35),lab=rep(clades,5), line=-1.8, tick=F,cex.axis=0.7)
axis(1,at=c(4,11,18,25,32), lab=c("V1","V2","V3","V4","V5"),line=0,tick=F,cex.axis=1.2)
par(las=2)
axis(2, at=0:8,pos=0.5,cex.axis=1.2)
par(xpd=NA)
#x axis vertical line
segments(0.5,8.5,0.5,-1.4,lwd=2.5)
#color legend bottom left hand corner
rect(0.5,-2.8,1.5,-1.8, col=alpha(colors[1],0.25),lwd=0.8)
rect(2.5,-2.8,3.5,-1.8, col=alpha(colors[1],0.5),lwd=0.8)
rect(4.5,-2.8,5.5,-1.8, col=alpha(colors[1],0.75),lwd=0.8)
rect(6.5,-2.8,7.5,-1.8, col=alpha(colors[1],1),lwd=0.8)
text(1,-3, labels="25%")
text(3,-3, labels="50%")
text(5,-3, labels="75%")
text(7,-3, labels="100%")
#bright color scheme
#colors <- c(1,0,0,0,0.5,1,0,1,0,1,0,0.8,1,0.5,0)
#moderate color scheme
require(RColorBrewer)
colors <- brewer.pal(5, 'Set1')
require(plotrix)
require(scales)
full.df <- data.frame(stringsAsFactors = F)
for (n in 1:5){
temp <- as.data.frame.matrix(table(ngTotal[which(ngTotal$vloop==n),c(1,3)]))
prop <- temp/rowSums(temp)
bool <- temp < 0.10*rowSums(temp)
col <- colors[((n*3)-2):(n*3)]
r <- col[1]
g <- col[2]
b <- col[3]
#vertical line segments
segments((n*7)+0.5,8.5,(n*7)+0.5,-1.4,lwd=3)
#iterate through all possible positions in the 7x9 grid, check for the proportion and draw the color density with it
for (x in 1:7){
text(24+(x*1.5),-2, labels=clades[x])
text(24+(x*1.5),-4, labels=sizes[x])
for (y in 1:9){
if (!is.null(prop[x,y])){
alv <- prop[x,y]
}else{
alv <- 0.00
}
#boxes for the whole plot
rect(((n-1)*7)+x-0.5, y-1.5,((n-1)*7)+x+0.5,y-0.5, col=alpha(colors[n],alv),lwd=0.8)
#for low density boxes
if(!is.null(prop[x,y]) && isTRUE(bool[x,y]) && temp[x,y] > 1){
text(((n-1)*7)+x,y-1,labels=temp[x,y],col=colors[n], cex=0.8) #colors[n] #rgb(r,g,b)
}
}
}
}
higher <- data.frame(x=c(1,11,18,19,23,24,25),y=c(3,2,1,1,3,3,3))
for (i in 1:7){
text(higher[i,1],(higher[i,2]-0.2),labels="*",cex=1.7)
arrows(higher[i,1],higher[i,2],higher[i,1],(higher[i,2]+0.25), length=0.07, lwd=1.5)
}
lower <- data.frame(x=c(33,28),y=c(1,3))
for (i in 1:2){
text(lower[i,1],(lower[i,2]+0.2),labels="*",cex=1.7)
arrows(lower[i,1],lower[i,2],lower[i,1],(lower[i,2]-0.25), length=0.07, lwd=1.5)
}
#color legend bottom left hand corner
rect(0.5,-2.8,1.5,-1.8, col=alpha(colors[1],0.25),lwd=0.8)
rect(2.5,-2.8,3.5,-1.8, col=alpha(colors[1],0.5),lwd=0.8)
rect(4.5,-2.8,5.5,-1.8, col=alpha(colors[1],0.75),lwd=0.8)
rect(6.5,-2.8,7.5,-1.8, col=alpha(colors[1],1),lwd=0.8)
text(1,-3, labels="25%")
text(3,-3, labels="50%")
text(5,-3, labels="75%")
text(7,-3, labels="100%")
#bright color scheme
#colors <- c(1,0,0,0,0.5,1,0,1,0,1,0,0.8,1,0.5,0)
#moderate color scheme
require(RColorBrewer)
colors <- brewer.pal(5, 'Set1')
require(plotrix)
require(scales)
full.df <- data.frame(stringsAsFactors = F)
for (n in 1:5){
temp <- as.data.frame.matrix(table(ngTotal[which(ngTotal$vloop==n),c(1,3)]))
prop <- temp/rowSums(temp)
bool <- temp < 0.10*rowSums(temp)
col <- colors[((n*3)-2):(n*3)]
r <- col[1]
g <- col[2]
b <- col[3]
#vertical line segments
segments((n*7)+0.5,8.5,(n*7)+0.5,-1.4,lwd=3)
#iterate through all possible positions in the 7x9 grid, check for the proportion and draw the color density with it
for (x in 1:7){
text(24+(x*1.5),-2, labels=clades[x])
text(24+(x*1.5),-3, labels=sizes[x])
for (y in 1:9){
if (!is.null(prop[x,y])){
alv <- prop[x,y]
}else{
alv <- 0.00
}
#boxes for the whole plot
rect(((n-1)*7)+x-0.5, y-1.5,((n-1)*7)+x+0.5,y-0.5, col=alpha(colors[n],alv),lwd=0.8)
#for low density boxes
if(!is.null(prop[x,y]) && isTRUE(bool[x,y]) && temp[x,y] > 1){
text(((n-1)*7)+x,y-1,labels=temp[x,y],col=colors[n], cex=0.8) #colors[n] #rgb(r,g,b)
}
}
}
}
higher <- data.frame(x=c(1,11,18,19,23,24,25),y=c(3,2,1,1,3,3,3))
for (i in 1:7){
text(higher[i,1],(higher[i,2]-0.2),labels="*",cex=1.7)
arrows(higher[i,1],higher[i,2],higher[i,1],(higher[i,2]+0.25), length=0.07, lwd=1.5)
}
lower <- data.frame(x=c(33,28),y=c(1,3))
for (i in 1:2){
text(lower[i,1],(lower[i,2]+0.2),labels="*",cex=1.7)
arrows(lower[i,1],lower[i,2],lower[i,1],(lower[i,2]-0.25), length=0.07, lwd=1.5)
}
clades <- c("AE","AG","A1","B","C","D","F1")
sizes <- c(nrow(ngTotal[which(ngTotal$subtype=="01_AE" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="02_AG" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="A1" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="B" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="C" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="D" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="F1" & ngTotal$vloop==1),]))
#NGS Plot #2
par(mar=c(8,4,2,2), pty="m")
plot(1:8,c(0,2,4,5,7,8,8,8),cex=0, ylim=c(-0.5,8.5),xlim=c(1,35), xaxt='n',yaxt='n',
main=NULL,xlab="", ylab="", cex.lab=1.7,cex.main=2, bty='n')
title(xlab="V-Loop / Subtype", line=4, cex.lab=1.5)
title(ylab="Number of N-linked Glycosylation Sites", line=1.7, cex.lab=1.5)
par(las=1)
axis(1,at=c(1:35),lab=rep(clades,5), line=-1.8, tick=F,cex.axis=0.7)
axis(1,at=c(4,11,18,25,32), lab=c("V1","V2","V3","V4","V5"),line=0,tick=F,cex.axis=1.2)
par(las=2)
axis(2, at=0:8,pos=0.5,cex.axis=1.2)
par(xpd=NA)
#x axis vertical line
segments(0.5,8.5,0.5,-1.4,lwd=2.5)
#color legend bottom left hand corner
rect(0.5,-2.8,1.5,-1.8, col=alpha(colors[1],0.25),lwd=0.8)
rect(2.5,-2.8,3.5,-1.8, col=alpha(colors[1],0.5),lwd=0.8)
rect(4.5,-2.8,5.5,-1.8, col=alpha(colors[1],0.75),lwd=0.8)
rect(6.5,-2.8,7.5,-1.8, col=alpha(colors[1],1),lwd=0.8)
text(1,-3, labels="25%")
text(3,-3, labels="50%")
text(5,-3, labels="75%")
text(7,-3, labels="100%")
#bright color scheme
#colors <- c(1,0,0,0,0.5,1,0,1,0,1,0,0.8,1,0.5,0)
#moderate color scheme
require(RColorBrewer)
colors <- brewer.pal(5, 'Set1')
require(plotrix)
require(scales)
full.df <- data.frame(stringsAsFactors = F)
for (n in 1:5){
temp <- as.data.frame.matrix(table(ngTotal[which(ngTotal$vloop==n),c(1,3)]))
prop <- temp/rowSums(temp)
bool <- temp < 0.10*rowSums(temp)
col <- colors[((n*3)-2):(n*3)]
r <- col[1]
g <- col[2]
b <- col[3]
#vertical line segments
segments((n*7)+0.5,8.5,(n*7)+0.5,-1.4,lwd=3)
#iterate through all possible positions in the 7x9 grid, check for the proportion and draw the color density with it
for (x in 1:7){
text(24+(x*1.5),-2.2, labels=clades[x])
text(24+(x*1.5),-2.7, labels=sizes[x])
for (y in 1:9){
if (!is.null(prop[x,y])){
alv <- prop[x,y]
}else{
alv <- 0.00
}
#boxes for the whole plot
rect(((n-1)*7)+x-0.5, y-1.5,((n-1)*7)+x+0.5,y-0.5, col=alpha(colors[n],alv),lwd=0.8)
#for low density boxes
if(!is.null(prop[x,y]) && isTRUE(bool[x,y]) && temp[x,y] > 1){
text(((n-1)*7)+x,y-1,labels=temp[x,y],col=colors[n], cex=0.8) #colors[n] #rgb(r,g,b)
}
}
}
}
higher <- data.frame(x=c(1,11,18,19,23,24,25),y=c(3,2,1,1,3,3,3))
for (i in 1:7){
text(higher[i,1],(higher[i,2]-0.2),labels="*",cex=1.7)
arrows(higher[i,1],higher[i,2],higher[i,1],(higher[i,2]+0.25), length=0.07, lwd=1.5)
}
lower <- data.frame(x=c(33,28),y=c(1,3))
for (i in 1:2){
text(lower[i,1],(lower[i,2]+0.2),labels="*",cex=1.7)
arrows(lower[i,1],lower[i,2],lower[i,1],(lower[i,2]-0.25), length=0.07, lwd=1.5)
}
clades <- c("AE","AG","A1","B","C","D","F1")
sizes <- c(nrow(ngTotal[which(ngTotal$subtype=="01_AE" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="02_AG" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="A1" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="B" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="C" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="D" & ngTotal$vloop==1),]),
nrow(ngTotal[which(ngTotal$subtype=="F1" & ngTotal$vloop==1),]))
#NGS Plot #2
par(mar=c(8,4,2,2), pty="m")
plot(1:8,c(0,2,4,5,7,8,8,8),cex=0, ylim=c(-0.5,8.5),xlim=c(1,35), xaxt='n',yaxt='n',
main=NULL,xlab="", ylab="", cex.lab=1.7,cex.main=2, bty='n')
title(xlab="V-Loop / Subtype", line=4, cex.lab=1.5)
title(ylab="Number of N-linked Glycosylation Sites", line=1.7, cex.lab=1.5)
par(las=1)
axis(1,at=c(1:35),lab=rep(clades,5), line=-1.8, tick=F,cex.axis=0.7)
axis(1,at=c(4,11,18,25,32), lab=c("V1","V2","V3","V4","V5"),line=0,tick=F,cex.axis=1.2)
par(las=2)
axis(2, at=0:8,pos=0.5,cex.axis=1.2)
par(xpd=NA)
#x axis vertical line
segments(0.5,8.5,0.5,-1.4,lwd=2.5)
#color legend bottom left hand corner
rect(0.5,-2.8,1.5,-1.8, col=alpha(colors[1],0.25),lwd=0.8)
rect(2.5,-2.8,3.5,-1.8, col=alpha(colors[1],0.5),lwd=0.8)
rect(4.5,-2.8,5.5,-1.8, col=alpha(colors[1],0.75),lwd=0.8)
rect(6.5,-2.8,7.5,-1.8, col=alpha(colors[1],1),lwd=0.8)
text(1,-3, labels="25%")
text(3,-3, labels="50%")
text(5,-3, labels="75%")
text(7,-3, labels="100%")
#bright color scheme
#colors <- c(1,0,0,0,0.5,1,0,1,0,1,0,0.8,1,0.5,0)
#moderate color scheme
require(RColorBrewer)
colors <- brewer.pal(5, 'Set1')
require(plotrix)
require(scales)
full.df <- data.frame(stringsAsFactors = F)
for (n in 1:5){
temp <- as.data.frame.matrix(table(ngTotal[which(ngTotal$vloop==n),c(1,3)]))
prop <- temp/rowSums(temp)
bool <- temp < 0.10*rowSums(temp)
col <- colors[((n*3)-2):(n*3)]
r <- col[1]
g <- col[2]
b <- col[3]
#vertical line segments
segments((n*7)+0.5,8.5,(n*7)+0.5,-1.4,lwd=3)
#iterate through all possible positions in the 7x9 grid, check for the proportion and draw the color density with it
for (x in 1:7){
text(24+(x*1.7),-2.2, labels=clades[x])
text(24+(x*1.7),-2.7, labels=sizes[x])
for (y in 1:9){
if (!is.null(prop[x,y])){
alv <- prop[x,y]
}else{
alv <- 0.00
}
#boxes for the whole plot
rect(((n-1)*7)+x-0.5, y-1.5,((n-1)*7)+x+0.5,y-0.5, col=alpha(colors[n],alv),lwd=0.8)
#for low density boxes
if(!is.null(prop[x,y]) && isTRUE(bool[x,y]) && temp[x,y] > 1){
text(((n-1)*7)+x,y-1,labels=temp[x,y],col=colors[n], cex=0.8) #colors[n] #rgb(r,g,b)
}
}
}
}
higher <- data.frame(x=c(1,11,18,19,23,24,25),y=c(3,2,1,1,3,3,3))
for (i in 1:7){
text(higher[i,1],(higher[i,2]-0.2),labels="*",cex=1.7)
arrows(higher[i,1],higher[i,2],higher[i,1],(higher[i,2]+0.25), length=0.07, lwd=1.5)
}
lower <- data.frame(x=c(33,28),y=c(1,3))
for (i in 1:2){
text(lower[i,1],(lower[i,2]+0.2),labels="*",cex=1.7)
arrows(lower[i,1],lower[i,2],lower[i,1],(lower[i,2]-0.25), length=0.07, lwd=1.5)
}
