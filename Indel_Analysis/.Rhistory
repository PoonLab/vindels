indel.sizes[z,"subtype"] <- subtype #vregion
indel.sizes[z,"count"] <- sum(len.diff[[z]])
indel.sizes[z,"vregion"] <- paste0("V",vregion)
if (size == "three"){
indel.sizes[z,"size"] <- "3"
}else if (size == "six"){
indel.sizes[z,"size"] <- "6"
}else{
indel.sizes[z,"size"] <- "9+"
}
}
# MOSAIC PLOTS - Figure 3
df3 <- data.frame(variable.loop=rep(indel.sizes$vregion, indel.sizes$count), indel.size=rep(indel.sizes$size,indel.sizes$count),stringsAsFactors = F)
df4 <- data.frame(subtype=rep(indel.sizes$subtype, indel.sizes$count), indel.size=rep(indel.sizes$size,indel.sizes$count),stringsAsFactors = F)
#used to reorder the data frame so that 9+ is first, 6 is second, etc
df3$indel.size <- factor(df3$indel.size,levels=c("9+","6","3"))
df3 <- df3[order(df3$indel.size),]
#used to reorder the data frame so that 9+ is first, 6 is second, etc
df4$indel.size <- factor(df4$indel.size,levels=c("9+","6","3"))
df4 <- df4[order(df4$indel.size),]
#used for determining the proportions in the mosaic plot
nrow(df3[which(df3$variable.loop=="V2" & df3$indel.size=="3"),])/nrow(df3[which(df3$variable.loop=="V2"),])
require(vcd)
library(gridGraphics)
library(gridExtra)
#par(ps = 50, cex.lab = 0.7, cex.axis = 0.5, cex.sub=0.5, las=0, xpd=T, mar=c(5,4, 2,2), mfrow=c(2,2))
mosaic(~variable.loop + indel.size, data=df3,
shade=T, main=NULL, direction="v",
spacing=spacing_equal(sp = unit(0.7, "lines")),
residuals_type="Pearson",
margins=c(2,2,4,2),
labeling_args = list(tl_labels = c(F,T),
tl_varnames=c(F,T),
gp_labels=gpar(fontsize=20),
gp_varnames=gpar(fontsize=24),
set_varnames = c(variable.loop="Variable Loop",
indel.size="Indel Length (nt)"),
offset_labels=c(0,0,0,0),rot_labels=c(0,0,0,90), just_labels=c("center","center","center","center")),
legend=legend_resbased(fontsize = 16, fontfamily = "",
x = unit(0.2, "lines"), y = unit(3,"lines"),
height = unit(0.8, "npc"),
width = unit(1, "lines"), range=c(-10,10)),
set_labels=list(Variable.Loop=c("V1","V2","V3","V4","V5")))
m <- mosaic(~variable.loop + indel.size, data=df3,
shade=T, main=NULL, direction="v",
spacing=spacing_equal(sp = unit(0.7, "lines")),
residuals_type="Pearson",
margins=c(2,2,4,2),
labeling_args = list(tl_labels = c(F,T),
tl_varnames=c(F,T),
gp_labels=gpar(fontsize=20),
gp_varnames=gpar(fontsize=24),
set_varnames = c(variable.loop="Variable Loop",
indel.size="Indel Length (nt)"),
offset_labels=c(0,0,0,0),rot_labels=c(0,0,0,90), just_labels=c("center","center","center","center")),
legend=legend_resbased(fontsize = 16, fontfamily = "",
x = unit(0.2, "lines"), y = unit(3,"lines"),
height = unit(0.8, "npc"),
width = unit(1, "lines"), range=c(-10,10)),
set_labels=list(Variable.Loop=c("V1","V2","V3","V4","V5")))
chisq.test()
df3
chisq.test(df3)
?chisq.test
as.matrix(df3)
table(df3)
as.matrix(table(df3))
chisq.test(as.matrix(table(df3)))
c <- chisq.test(as.matrix(table(df3)))
c$residuals
c$statistic
c$data.name
c$expected
c$observed
d <- as.matrix(table(df3))
#MOSAIC PLOT -- chi squared data analysis
d <- as.matrix(table(df3))
c <- chisq.test(d)
c
setwd("~/vindels/Indel_Analysis/")
require(bbmle)
require(MASS)
require(xtable)
obj.f <- function(rate) -pll(rate, outcomes, times)  # objective function
pll <- function(rate, outcomes, times) {
# @param rate:  instantaneous rate of indels
# @param outcomes:  vector of boolean values, TRUE if *no* indel on cherry
# @param times:  vector of branch lengths associated with cherries
# @return: log-likelihood of model
pr <- exp(-rate * times)  # probabilities of no indels for each cherry
sum( outcomes * log(pr), (1-outcomes) * log(1-pr) )
}
csvfolder <- list.files(path="~/PycharmProjects/hiv-evolution-master/9_2_indels",full.names=TRUE)
max.llh <- data.frame(stringsAsFactors = FALSE)
max.llh2 <- data.frame(subtype=character(),stringsAsFactors = FALSE)
con.int <- data.frame(stringsAsFactors = FALSE)
big.df <- data.frame(stringsAsFactors = FALSE)
rates <- c()
for (i in 1:length(csvfolder)){
csv <- read.csv(csvfolder[i])
filename <- strsplit(strsplit(csvfolder[i], "/")[[1]][7], "\\+.")[[1]][1]
max.llh2 [i,1] <- filename
print(filename)
times.df <- c()
outcomes.df <- data.frame()
for (z in 1:5){
times <- csv$total.length[which(!is.na(csv[paste0("VR",z,".indel")]))]
times.df <- c(times.df, times)
outcomes <- csv[which(!is.na(csv[paste0("VR",z,".indel")])),paste0("VR",z,".indel")]
outcomes.df <- rbind(outcomes.df, data.frame(out=outcomes, vregion=z))
obj.f <- function(rate) -pll(rate, outcomes, times)  # objective function
mle.result <- bbmle::mle2(obj.f, start=list(rate=1), method = "Brent", lower=1e-12, upper = 1)
max.llh <- rbind(max.llh, data.frame(subtype=filename, vloop=z, rate=coef(mle.result)[[1]]))
max.llh2 [i,z+1] <- coef(mle.result)[[1]]
rates <- c(rates,coef(mle.result)[[1]]) # this is the rate
#res$value #this is the likelihood
if(!all(outcomes)){
int <- confint(mle.result, level = 0.95)
con.int <- rbind(con.int,data.frame(subtype=filename,vloop=z,lower=int[[1]],upper=int[[2]]))
}else{
con.int <- rbind(con.int,data.frame(subtype=filename,vloop=z,lower=0,upper=0))
}
}
big.df <- rbind(big.df, data.frame(subtype=rep(filename, length(times.df)), Time=times.df, outcomes=outcomes.df$out, Vregion=as.factor(outcomes.df$vregion)))
}
require(ggplot2)
#indel rate plot
require(RColorBrewer)
colors <- brewer.pal(7, 'Set2')
colors2 <- brewer.pal(7, 'Dark2')
con.int <- con.int[order(con.int$subtype),]
# MARKERS
submark <- data.frame(subtype=max.llh$subtype,vloop=max.llh$vloop,rate=rep(NaN,35))
submark[18,3] <- 0.12
rates <- split(max.llh[,2:3], max.llh[,1])
subline <- data.frame(subtype=c("B"), vloop=c(3),rate=c(0.118))
noest <- data.frame(subtype=c("F1"), vloop=c(3), rate=c(0.02))
vbox <- data.frame(subtype=c("F1"), vloop=c(3),rate=c(0.103))
vloops <- data.frame(subtype=c(rep("F1",5)), vloop=c(rep(4.5,5)),rate=c(0.100+1:5*0.007))
vline <- data.frame(subtype=c("01_AE","02_AG","A1","B","C","D"), vloop=rep(3,6),rate=rep(0.028,6))
plot <- ggplot(max.llh, aes(x=vloop,
y=rate,
fill=subtype,
width=1)) + geom_bar(colour="black",
stat="identity",
position="dodge",
show.legend=F) +facet_wrap(~subtype,
ncol=7,
nrow=1)  + geom_text(data=submark,
label="*",
size=10) + geom_segment(data=subline,
aes(x=vloop-2.25,xend=vloop+2.25,y=rate,yend=rate),size=0.8)  + geom_segment(data=subline, aes(x=vloop,xend=vloop,y=rate-0.003,yend=rate-0.01),
arrow=arrow(length=unit(3,"mm")),
size=0.8)
plot + labs(x="Variable Loop",
y="Indel Rate (Events/Lineage/Year)")+scale_fill_manual(values=
colors2)+scale_y_continuous(expand = c(0, 0),
limits = c(0, 0.155))+theme(panel.grid.major.y = element_line(color="black",size=0.3),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.spacing=unit(1, "mm"),
panel.background=element_rect(fill="gray88",colour="white",size=0),
plot.margin =margin(t = 10, r = 10, b = 20, l = 8, unit = "pt"),
axis.line = element_line(colour = "black"),
axis.title.y=element_text(size=20,margin=margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x=element_text(size=20,margin=margin(t = 15, r = 0, b = 0, l = 0)),
strip.text.x = element_text(size=16),
axis.text=element_text(size=14),
legend.position="none")+ geom_errorbar(aes(ymax = con.int$upper, ymin = con.int$lower),
width = 0.25) + geom_segment(data=vline,
aes(x=vloop,
y=rate-0.001,
xend=vloop,
yend=rate-0.005),
arrow=arrow(length=unit(2,"mm")),
size=0.7)+ geom_text(data=vline,
label="*",
size=8)  + geom_rect(data=noest,
aes(xmin=vloop-0.5,
xmax= vloop+0.5,
ymin=rate-0.02,
ymax=rate+0.02),
fill="white",
color="white")+geom_text(data=noest,
label="NO ESTIMATE",
size=6,
angle=90)
plot + labs(x="Variable Loop",
y="Indel Rate (Events/Lineage/Year)")+scale_fill_manual(values=
colors2)+scale_y_continuous(expand = c(0, 0),
limits = c(0, 0.155))+theme(panel.grid.major.y = element_line(color="black",size=0.3),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.spacing=unit(1, "mm"),
panel.background=element_rect(fill="gray88",colour="white",size=0),
plot.margin =margin(t = 10, r = 10, b = 20, l = 8, unit = "pt"),
axis.line = element_line(colour = "black"),
axis.title.y=element_text(size=20,margin=margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x=element_text(size=20,margin=margin(t = 15, r = 0, b = 0, l = 0)),
strip.text.x = element_text(size=16),
axis.text=element_text(size=14),
legend.position="none")+ geom_errorbar(aes(ymax = con.int$upper, ymin = con.int$lower),
width = 0.25) + geom_segment(data=vline,
aes(x=vloop,
y=rate-0.001,
xend=vloop,
yend=rate-0.005),
arrow=arrow(length=unit(2,"mm")),
size=0.7)+ geom_text(data=vline,
label="*",
size=8)  + geom_rect(data=noest,
aes(xmin=vloop-0.5,
xmax= vloop+0.5,
ymin=rate-0.02,
ymax=rate+0.02),
fill="grey88",
color="grey88")+geom_text(data=noest,
label="no estimate",
size=6,
angle=90)
plot + labs(x="Variable Loop",
y="Indel Rate (Events/Lineage/Year)")+scale_fill_manual(values=
colors2)+scale_y_continuous(expand = c(0, 0),
limits = c(0, 0.155))+theme(panel.grid.major.y = element_line(color="black",size=0.3),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.spacing=unit(1, "mm"),
panel.background=element_rect(fill="gray88",colour="white",size=0),
plot.margin =margin(t = 10, r = 10, b = 20, l = 8, unit = "pt"),
axis.line = element_line(colour = "black"),
axis.title.y=element_text(size=20,margin=margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x=element_text(size=20,margin=margin(t = 15, r = 0, b = 0, l = 0)),
strip.text.x = element_text(size=16),
axis.text=element_text(size=14),
legend.position="none")+ geom_errorbar(aes(ymax = con.int$upper, ymin = con.int$lower),
width = 0.25) + geom_segment(data=vline,
aes(x=vloop,
y=rate-0.001,
xend=vloop,
yend=rate-0.005),
arrow=arrow(length=unit(2,"mm")),
size=0.7)+ geom_text(data=vline,
label="*",
size=8)  + geom_rect(data=noest,
aes(xmin=vloop-0.5,
xmax= vloop+0.5,
ymin=rate-0.02,
ymax=rate+0.02),
fill="grey88",
color="grey88")+geom_text(data=noest,
label="no estimate",
size=7,
angle=90)
plot + labs(x="Variable Loop",
y="Indel Rate (Events/Lineage/Year)")+scale_fill_manual(values=
colors2)+scale_y_continuous(expand = c(0, 0),
limits = c(0, 0.155))+theme(panel.grid.major.y = element_line(color="black",size=0.3),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.spacing=unit(1, "mm"),
panel.background=element_rect(fill="gray88",colour="white",size=0),
plot.margin =margin(t = 10, r = 10, b = 20, l = 8, unit = "pt"),
axis.line = element_line(colour = "black"),
axis.title.y=element_text(size=20,margin=margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x=element_text(size=20,margin=margin(t = 15, r = 0, b = 0, l = 0)),
strip.text.x = element_text(size=16),
axis.text=element_text(size=14),
legend.position="none")+ geom_errorbar(aes(ymax = con.int$upper, ymin = con.int$lower),
width = 0.25) + geom_segment(data=vline,
aes(x=vloop,
y=rate-0.001,
xend=vloop,
yend=rate-0.005),
arrow=arrow(length=unit(2,"mm")),
size=0.7)+ geom_text(data=vline,
label="*",
size=8)  + geom_rect(data=noest,
aes(xmin=vloop-0.5,
xmax= vloop+0.5,
ymin=rate-0.02,
ymax=rate+0.02),
fill="grey88",
color="grey88")+geom_text(aes(y=rate-0.01),data=noest,
label="no estimate",
size=7,
angle=90)
plot + labs(x="Variable Loop",
y="Indel Rate (Events/Lineage/Year)")+scale_fill_manual(values=
colors2)+scale_y_continuous(expand = c(0, 0),
limits = c(0, 0.155))+theme(panel.grid.major.y = element_line(color="black",size=0.3),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.spacing=unit(1, "mm"),
panel.background=element_rect(fill="gray88",colour="white",size=0),
plot.margin =margin(t = 10, r = 10, b = 20, l = 8, unit = "pt"),
axis.line = element_line(colour = "black"),
axis.title.y=element_text(size=20,margin=margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x=element_text(size=20,margin=margin(t = 15, r = 0, b = 0, l = 0)),
strip.text.x = element_text(size=16),
axis.text=element_text(size=14),
legend.position="none")+ geom_errorbar(aes(ymax = con.int$upper, ymin = con.int$lower),
width = 0.25) + geom_segment(data=vline,
aes(x=vloop,
y=rate-0.001,
xend=vloop,
yend=rate-0.005),
arrow=arrow(length=unit(2,"mm")),
size=0.7)+ geom_text(data=vline,
label="*",
size=8)  + geom_rect(data=noest,
aes(xmin=vloop-0.5,
xmax= vloop+0.5,
ymin=rate-0.02,
ymax=rate+0.02),
fill="grey88",
color="grey88")+geom_text(aes(y=rate-0.005),data=noest,
label="no estimate",
size=7,
angle=90)
ifolder <- list.files(path="~/PycharmProjects/hiv-evolution-master/10_8_NGlycs_i", full.names=TRUE)
tfolder <- list.files(path="~/PycharmProjects/hiv-evolution-master/10_7_NGlycs_total", full.names=TRUE)
totals.df <- data.frame(subtype=character(), stringsAsFactors = F)
intf.df <- data.frame(subtype=character(), stringsAsFactors = F)
subtypes <- c()
for (n in 1:length(ifolder)){
subtype <- strsplit(strsplit(tfolder[n], "/")[[1]][7],"\\+")[[1]][1]
subtypes <- c(subtypes, subtype)
totals <- read.csv(tfolder[n], sep=":", header=F,stringsAsFactors = F)
interfered <- read.csv(ifolder[n], sep=":", header=F, stringsAsFactors = F)
totals$vloop <- sapply(totals$V1, function(x) strsplit(x,"\\.")[[1]][3])
totals$subtype <- rep(subtype, nrow(totals))
totals$count <- mapply(function(x, y) { length(strsplit(x, ",")[[1]]) +
length(strsplit(y, ",")[[1]])}, totals$V2, totals$V3)
interfered$vloop <- sapply(interfered$V1, function(x) strsplit(x,"\\.")[[1]][3])
interfered$subtype <- rep(subtype, nrow(interfered))
interfered$count <- mapply(function(x, y) { length(strsplit(x, ",")[[1]]) +
length(strsplit(y, ",")[[1]])}, interfered$V2, interfered$V3)
totals.df <- rbind(totals.df, totals)
intf.df <- rbind(intf.df, interfered)
}
#MAIN 3 DATA FRAMES
disrupt <- data.frame(stringsAsFactors = F)
prop.df <- data.frame(stringsAsFactors = F)
#REGRESSION FIGURE --- Proportion of NGS sites vs Proportion of Disrupted NGS Sites
#contains the proportions of amino acids belonging to NGSites
ngProps <- read.csv("~/PycharmProjects/hiv-evolution-master/ngCounts.csv") #generated using 10_9a Nglycs
ngProps.df <- data.frame()
for (i in subtypes){
for (m in 1:5){
tCount <- sum(totals.df[which(totals.df$subtype==i & totals.df$vloop==m),6])
iCount <- sum(intf.df[which(intf.df$subtype==i & intf.df$vloop==m),6])
ngProps.df <- rbind(ngProps.df, data.frame(subtype=i, vloop=m, prop=ngProps[which(ngProps$subtype==i), paste0('V',m)]))
if (tCount != 0){
disrupt <- rbind(disrupt, data.frame(subtype=i, vloop=m, count=iCount,total=tCount, prop=iCount/tCount))
}else{
disrupt <- rbind(disrupt, data.frame(subtype=i, vloop=m, count=iCount,total=tCount, prop=0))
}
}
}
#HEAT MAP FIGURE
#contains the total counts of NG sites in all sequences
# format ----
ngTotal <- read.csv("~/PycharmProjects/hiv-evolution-master/ngTotal.csv", stringsAsFactors = F)
ngTotal$accno <- NULL
v1 <- ngTotal[which(ngTotal$vloop==1),c(1,3)]
v2 <- ngTotal[which(ngTotal$vloop==2),c(1,3)]
v3 <- ngTotal[which(ngTotal$vloop==3),c(1,3)]
v4 <- ngTotal[which(ngTotal$vloop==4),c(1,3)]
v5 <- ngTotal[which(ngTotal$vloop==5),c(1,3)]
#stats analysis between subtypes
summary(glm(count ~ subtype, data = v5, family=poisson))
v1.df <- as.data.frame.matrix(table(v1))
v2.df <- as.data.frame.matrix(table(v2))
v3.df <- as.data.frame.matrix(table(v3))
v4.df <- as.data.frame.matrix(table(v4))
v5.df <- as.data.frame.matrix(table(v5))
v1.prop <- v1.df/rowSums(v1.df)
v2.prop <- v2.df/rowSums(v2.df)
v3.prop <- v3.df/rowSums(v3.df)
v4.prop <- v4.df/rowSums(v4.df)
v5.prop <- v5.df/rowSums(v5.df)
#NGS Plot #2
par(mar=c(6,4,2,2), pty="m")
plot(1:8,c(0,2,4,5,7,8,8,9),cex=0, ylim=c(-0.5,8.5),xlim=c(1,35), xaxt='n',yaxt='n',
main=NULL,xlab="", ylab="", cex.lab=1.7,cex.main=2, bty='n')
title(xlab="V-Loop / Subtype", line=4, cex.lab=1.5)
title(ylab="Number of N-linked Glycosylation Sites", line=1.7, cex.lab=1.5)
par(las=1)
axis(1,at=c(1:35),lab=rep(c("AE","AG","A1","B","C","D","F1"),5), line=-1.8, tick=F,cex.axis=0.7)
axis(1,at=c(4,11,18,25,32), lab=c("V1","V2","V3","V4","V5"),line=1,tick=F,cex.axis=1.2)
par(las=2)
axis(2, at=0:7,pos=0.5,cex.axis=1.2)
par(xpd=NA)
#first vertical segment
segments(0.5,8.5,0.5,-1.4,lwd=2.5)
#bright color scheme
#colors <- c(1,0,0,0,0.5,1,0,1,0,1,0,0.8,1,0.5,0)
#moderate color scheme
require(RColorBrewer)
colors <- brewer.pal(5, 'Set1')
require(plotrix)
require(scales)
full.df <- data.frame(stringsAsFactors = F)
for (n in 1:5){
temp <- as.data.frame.matrix(table(ngTotal[which(ngTotal$vloop==n),c(1,3)]))
prop <- temp/rowSums(temp)
bool <- temp < 0.10*rowSums(temp)
col <- colors[((n*3)-2):(n*3)]
r <- col[1]
g <- col[2]
b <- col[3]
#vertical line segments
segments((n*7)+0.5,8.5,(n*7)+0.5,-1.4,lwd=3)
for (x in 1:7){
for (y in 1:9){
if (!is.null(prop[x,y])){
alv <- prop[x,y]
}else{
alv <- 0.00
}
#boxes for the whole plot
rect(((n-1)*7)+x-0.5, y-1.5,((n-1)*7)+x+0.5,y-0.5, col=alpha(colors[n],alv),lwd=0.8)
#for low density boxes
if(!is.null(prop[x,y]) && isTRUE(bool[x,y]) && temp[x,y] > 1){
text(((n-1)*7)+x,y-1,labels=temp[x,y],col=colors[n], cex=0.8) #colors[n] #rgb(r,g,b)
}
}
}
}
#stats analysis between subtypes
summary(glm(count ~ subtype, data = v5, family=poisson))
#stats analysis between subtypes
summary(glm(count ~ subtype, data = v4, family=poisson))
#stats analysis between subtypes
summary(glm(count ~ subtype, data = v3, family=poisson))
v1.df <- as.data.frame.matrix(table(v1))
v2.df <- as.data.frame.matrix(table(v2))
v3.df <- as.data.frame.matrix(table(v3))
v4.df <- as.data.frame.matrix(table(v4))
v5.df <- as.data.frame.matrix(table(v5))
v1.prop <- v1.df/rowSums(v1.df)
v2.prop <- v2.df/rowSums(v2.df)
v3.prop <- v3.df/rowSums(v3.df)
v4.prop <- v4.df/rowSums(v4.df)
v5.prop <- v5.df/rowSums(v5.df)
#NGS Plot #2
par(mar=c(6,4,2,2), pty="m")
plot(1:8,c(0,2,4,5,7,8,8,9),cex=0, ylim=c(-0.5,8.5),xlim=c(1,35), xaxt='n',yaxt='n',
main=NULL,xlab="", ylab="", cex.lab=1.7,cex.main=2, bty='n')
title(xlab="V-Loop / Subtype", line=4, cex.lab=1.5)
title(ylab="Number of N-linked Glycosylation Sites", line=1.7, cex.lab=1.5)
par(las=1)
axis(1,at=c(1:35),lab=rep(c("AE","AG","A1","B","C","D","F1"),5), line=-1.8, tick=F,cex.axis=0.7)
axis(1,at=c(4,11,18,25,32), lab=c("V1","V2","V3","V4","V5"),line=1,tick=F,cex.axis=1.2)
par(las=2)
axis(2, at=0:7,pos=0.5,cex.axis=1.2)
par(xpd=NA)
#first vertical segment
segments(0.5,8.5,0.5,-1.4,lwd=2.5)
#bright color scheme
#colors <- c(1,0,0,0,0.5,1,0,1,0,1,0,0.8,1,0.5,0)
#moderate color scheme
require(RColorBrewer)
colors <- brewer.pal(5, 'Set1')
require(plotrix)
require(scales)
full.df <- data.frame(stringsAsFactors = F)
for (n in 1:5){
temp <- as.data.frame.matrix(table(ngTotal[which(ngTotal$vloop==n),c(1,3)]))
prop <- temp/rowSums(temp)
bool <- temp < 0.10*rowSums(temp)
col <- colors[((n*3)-2):(n*3)]
r <- col[1]
g <- col[2]
b <- col[3]
#vertical line segments
segments((n*7)+0.5,8.5,(n*7)+0.5,-1.4,lwd=3)
for (x in 1:7){
for (y in 1:9){
if (!is.null(prop[x,y])){
alv <- prop[x,y]
}else{
alv <- 0.00
}
#boxes for the whole plot
rect(((n-1)*7)+x-0.5, y-1.5,((n-1)*7)+x+0.5,y-0.5, col=alpha(colors[n],alv),lwd=0.8)
#for low density boxes
if(!is.null(prop[x,y]) && isTRUE(bool[x,y]) && temp[x,y] > 1){
text(((n-1)*7)+x,y-1,labels=temp[x,y],col=colors[n], cex=0.8) #colors[n] #rgb(r,g,b)
}
}
}
}
higher <- data.frame(x=c(1,11,18,19,23,24,25),y=c(3,2,1,1,3,3,3))
for (i in 1:7){
text(higher[i,1],(higher[i,2]-0.2),labels="*",cex=1.7)
arrows(higher[i,1],higher[i,2],higher[i,1],(higher[i,2]+0.25), length=0.07, lwd=1.5)
}
lower <- data.frame(x=c(33,28),y=c(1,3))
for (i in 1:2){
text(lower[i,1],(lower[i,2]+0.2),labels="*",cex=1.7)
arrows(lower[i,1],lower[i,2],lower[i,1],(lower[i,2]-0.25), length=0.07, lwd=1.5)
}
#stats analysis between subtypes
summary(glm(count ~ subtype, data = v2, family=poisson))
#stats analysis between subtypes
summary(glm(count ~ subtype, data = v1, family=poisson))
