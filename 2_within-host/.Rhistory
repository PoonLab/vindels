accno <- strsplit(input, "\\.")[[1]][5]
accno
}
# specifically handles fields containing a comma
splitRows <- function(row){
row <- data.frame(t(row),stringsAsFactors = F)
seqs <- str_split(row[1,6], ",")[[1]]
pos <- str_split(row[1,7],",")[[1]]
len <- length(seqs)
#print(seqs)
data.frame(row[rep(1,len),1:5], Seq=seqs, Pos=pos, row[rep(1,len),8:9])
}
add <- function(x, accno, vloop){
if (x == ""){
return(NA)
}
x <- as.numeric(x)
vloop <- as.character(vloop)
arg2 <- as.numeric(var.pos[var.pos$header==accno, paste0('start.',vloop)])
x + arg2
}
insOriginal <- function(indel, pos, vseq){
if (indel == ""){
return(vseq)
}
seqs <- strsplit(indel, ",")[[1]]
idxs <- as.numeric(strsplit(pos, ",")[[1]])
# iterate through the sequences and positions
for (i in 1:length(seqs)){
len <- nchar(seqs[i])
idx <- idxs[i]
# cut out insertion : substring before and up to start of insertion, substring from end of insertion until the end
vseq <- paste0(substr(vseq, 0, idx-len) , substr(vseq, idx+1, nchar(vseq)))
idxs[(i+1):length(idxs)] <- idxs[(i+1):length(idxs)] - len
}
vseq
}
delOriginal <- function(indel, pos, vseq){
if (indel == ""){
return(vseq)
}
seqs <- strsplit(indel, ",")[[1]]
idxs <- as.numeric(strsplit(pos, ",")[[1]])
# iterate through the sequences and positions
for (i in 1:length(seqs)){
len <- nchar(seqs[i])
idx <- idxs[i]
# add back deletion : substring before and up to the point of deletion, deletion sequence, substring after point of deletion until end
vseq <- paste0(substr(vseq, 0, idx) , seqs[i], substr(vseq, idx+1, nchar(vseq)))
idxs[(i+1):length(idxs)] <- idxs[(i+1):length(idxs)] + len
}
vseq
}
# Lio
path <- "~/Lio/"
ifolder <- Sys.glob(paste0(path,"9Indels/ins_mcc/*.csv"))
dfolder <- Sys.glob(paste0(path,"9Indels/del_mcc/*.csv"))
# INSERTION PARSING ----------
#ifolder <- Sys.glob("~/PycharmProjects/hiv-withinhost/9Indels/ins_mcc/*.csv")
#dfolder <- Sys.glob("~/PycharmProjects/hiv-withinhost/9Indels/del_mcc/*.csv")
all.ins <- data.frame()
all.del <- data.frame()
iTotal <- list()
dTotal <- list()
count <- 0
sequences <- list()
ins.glycs <- data.frame(stringsAsFactors = F)
del.glycs <- data.frame(stringsAsFactors = F)
for (file in 1:length(ifolder)){
print(file)
filename <- basename(ifolder[file])
iCSV <- read.csv(ifolder[file], stringsAsFactors = F)
dCSV <- read.csv(dfolder[file], stringsAsFactors = F)
# used for handling cases where there are no indels
if (all(is.na(iCSV$Ins))){
iCSV$Ins <- ""
}
if (all(is.na(dCSV$Del))){
dCSV$Del <- ""
}
# retrieving subtype field from the header
iCSV$Subtype <- unname(sapply(iCSV$Accno, getSubtype))
dCSV$Subtype <- unname(sapply(dCSV$Accno, getSubtype))
# retrieving the accno from the header
iAccno <- unname(sapply(iCSV$Accno, getAccno))
dAccno <- unname(sapply(dCSV$Accno, getAccno))
#
#iCSV$Accno <- iAccno
#dCSV$Accno <- dAccno
# store the sequences from these two data frames for nucleotide analysis
# remove them as they arent needed for this analysis
sequences$ins <- as.character(iCSV$Seq)
sequences$del <- as.character(dCSV$Seq)
dCSV$Seq <- NULL
iCSV$Seq <- NULL
# creates the counts column
iCSV$Count <- sapply(iCSV$Ins, csvcount)
dCSV$Count <- sapply(dCSV$Del, csvcount)
# extracts info from the indel column and puts it into two separate columns
insInfo <- sapply(iCSV$Ins, extractInfo)
insInfo <- unname(insInfo)
insInfo <- t(insInfo)
insInfo <- as.data.frame(insInfo)
insInfo$V1 <- as.character(insInfo$V1)
insInfo$V2 <- as.character(insInfo$V2)
iCSV <- cbind(iCSV, insInfo)
iCSV$Ins <- NULL
delInfo <- sapply(dCSV$Del, extractInfo)
delInfo <- unname(delInfo)
delInfo <- t(delInfo)
delInfo <- as.data.frame(delInfo)
delInfo$V1 <- as.character(delInfo$V1)
delInfo$V2 <- as.character(delInfo$V2)
dCSV <- cbind(dCSV, delInfo)
dCSV$Del <- NULL
iCSV$Vseq <- sequences$ins
dCSV$Vseq <- sequences$del
iCSV$pat <- rep(strsplit(filename, "\\.")[[1]][1], nrow(iCSV))
dCSV$pat <- rep(strsplit(filename, "\\.")[[1]][1], nrow(dCSV))
colnames(iCSV) <- c("Accno","Vloop", "Vlength","Subtype", "Count", "Seq", "Pos", "Vseq","Pat")
colnames(dCSV) <- c("Accno", "Vloop", "Vlength","Subtype", "Count", "Seq", "Pos", "Vseq","Pat")
ins.unchanged <- iCSV$Vseq
del.unchanged <- dCSV$Vseq
# REMOVE INSERTIONS
iCSV$Vseq <- mapply(insOriginal, indel=iCSV$Seq, pos=iCSV$Pos, vseq=iCSV$Vseq)
# RESTORE DELETIONS
dCSV$Vseq <- mapply(delOriginal, indel=dCSV$Seq, pos=dCSV$Pos, vseq=dCSV$Vseq)
# DELETIONS POSITIONS DO NOT NEED FIXING
ins.glycs <- rbind(ins.glycs, cbind(iCSV,ins.unchanged))
del.glycs <- rbind(del.glycs, cbind(dCSV, del.unchanged))
# COMMA SEPARATION FIX
new.ins <- data.frame()
new.del <- data.frame()
# make a new data.frame for each CSV df
# transport over all rows which do NOT contain a comma
new.ins <- iCSV[!grepl(",",iCSV$Seq),]
new.del <- dCSV[!grepl(",",dCSV$Seq),]
# handle comma rows separately with a function
iCommas <- iCSV[grepl(",",iCSV$Seq),]
dCommas <- dCSV[grepl(",",dCSV$Seq),]
# APPLY THE SPLIT ROWS TO GET ONE INDEL PER ROW
if (nrow(iCommas) > 0){
newrows <- apply(iCommas,1,splitRows)
for (i in 1:length(newrows)){
idx <- as.double(names(newrows)[i])
len <- nrow(newrows[[i]])
rownames(newrows[[i]]) <- seq(0,0.1*len-0.1,length=len) + idx
colnames(newrows[[i]]) <- c("Accno", "Vloop", "Vlength","Subtype", "Count", "Seq", "Pos", "Vseq", "Pat")
new.ins <- rbind(new.ins, newrows[[i]])
}
}
if (nrow(dCommas) > 0){
newrows <- apply(dCommas,1,splitRows)
for (i in 1:length(newrows)){
idx <- as.double(names(newrows)[i])
len <- nrow(newrows[[i]])
rownames(newrows[[i]]) <- seq(0,0.1*len-0.1,length=len) + idx
colnames(newrows[[i]]) <- c("Accno", "Vloop", "Vlength","Subtype", "Count", "Seq", "Pos", "Vseq", "Pat")
new.del <- rbind(new.del, newrows[[i]])
}
}
# RESTORE ORIGINAL VARIABLE LOOP SEQUENCES
var.pos <- read.csv(paste0(path,"3RegionSequences/variable/", strsplit(filename, "-")[[1]][1], ".csv"), stringsAsFactors = F)
var.pos <- var.pos[,-c(2,5,8,11,14)]
new.ins[is.na(new.ins$Pos),"Pos"] <- ""
new.del[is.na(new.del$Pos),"Pos"] <- ""
# Add the V position column into the two final data frames
new.ins$Vpos <- as.numeric(unname(mapply(add, x=new.ins$Pos, accno=new.ins$Accno, vloop=new.ins$Vloop)))
new.del$Vpos <- as.numeric(unname(mapply(add, x=new.del$Pos, accno=new.del$Accno, vloop=new.del$Vloop)))
# ADJUST POSITIONS TO MATCH THE PLACE WHERE THE INSERTION WAS
new.ins$Pos <- as.numeric(new.ins$Pos) - nchar(new.ins$Seq)
new.ins$Vpos <- new.ins$Vpos - nchar(new.ins$Seq)
# no adjustment needed for deletions
new.del$Pos <- as.numeric(new.del$Pos)
# OUTPUT
# for other analyses
# -----------------------------
all.ins <- rbind(all.ins, new.ins)
all.del <- rbind(all.del, new.del)
}
ins <- all.ins[all.ins$Seq!="",]
del <- all.del[all.del$Seq!="",]
# N - GLYC SITE OUTPUTS
# ---------------------------------------------
ins.glycs2 <- ins.glycs[ins.glycs$Seq!="",-c(3,4,5,9)]
del.glycs2 <- del.glycs[del.glycs$Seq!="",-c(3,4,5,9)]
write.csv(ins.glycs2,paste0(path, "13_nglycs/ins.csv"))
write.csv(del.glycs2,paste0(path, "13_nglycs/del.csv"))
ins.glycs2 <- ins.glycs[ins.glycs$Seq!="",-c(3,4,5,9)]
del.glycs2 <- del.glycs[del.glycs$Seq!="",-c(3,4,5,9)]
write.csv(ins.glycs2,paste0(path, "13_nglycs/ins.csv"), sep="\t")
write.csv(del.glycs2,paste0(path, "13_nglycs/del.csv"), sep="\t")
View(iCommas)
?write.cs
?write.csv
ins.glycs2 <- ins.glycs[ins.glycs$Seq!="",-c(3,4,5,9)]
del.glycs2 <- del.glycs[del.glycs$Seq!="",-c(3,4,5,9)]
write.csv(ins.glycs2,paste0(path, "13_nglycs/ins.tsv"), sep="\t")
write.csv(del.glycs2,paste0(path, "13_nglycs/del.tsv"), sep="\t")
ins.glycs2 <- ins.glycs[ins.glycs$Seq!="",-c(3,4,5,9)]
del.glycs2 <- del.glycs[del.glycs$Seq!="",-c(3,4,5,9)]
write.table(ins.glycs2,paste0(path, "13_nglycs/ins.csv"), row.names=F, sep="\t", quote=F)
write.table(del.glycs2,paste0(path, "13_nglycs/del.csv"), row.names=F, sep="\t", quote=F)
require(ape)
require(stringr)
removeNA <- function(input, repl=""){
if (is.na(input)){
input <- repl
}
input
}
translate <- function(dna) {
require(ape)
if (nchar(dna) %% 3 != 0) {
return(NA)
}
dnabin <- as.DNAbin(DNAString(dna))
aabin <- trans(dnabin)[[1]]
aaseq <- paste(as.character(aabin),collapse="")
aaseq
}
extractGlycs <- function(aaseq){
result <- gregexpr("N[^P][ST][^P]", aaseq)[[1]] * 3 - 2
result
}
countGlycs <- function(field){
if ("," %in% field){
return(str_count(field, ",") + 1)
}else if (field == ""){
return(0)
}else{
return(1)
}
}
#CAAGGGATGGAGGAAAAAACAATACGGAGACATTCAGACCT
#PycharmProjects/hiv-withinhost/
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"), row.names=1, sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), row.names=1,sep="\t", stringsAsFactors = F)
#CAAGGGATGGAGGAAAAAACAATACGGAGACATTCAGACCT
#PycharmProjects/hiv-withinhost/
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"),  sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), sep="\t", stringsAsFactors = F)
ins
colnames(ins)
require(ape)
require(stringr)
removeNA <- function(input, repl=""){
if (is.na(input)){
input <- repl
}
input
}
translate <- function(dna) {
require(ape)
if (nchar(dna) %% 3 != 0) {
return(NA)
}
dnabin <- as.DNAbin(DNAString(dna))
aabin <- trans(dnabin)[[1]]
aaseq <- paste(as.character(aabin),collapse="")
aaseq
}
extractGlycs <- function(aaseq){
result <- gregexpr("N[^P][ST][^P]", aaseq)[[1]] * 3 - 2
result
}
countGlycs <- function(field){
if ("," %in% field){
return(str_count(field, ",") + 1)
}else if (field == ""){
return(0)
}else{
return(1)
}
}
#CAAGGGATGGAGGAAAAAACAATACGGAGACATTCAGACCT
#PycharmProjects/hiv-withinhost/
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"),  sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), sep="\t", stringsAsFactors = F)
#ins$Pos <- ins$Pos + 1
#del$Pos <- del$Pos + 1
#ins$Seq <- sapply(ins$Seq, translate)
#del$Seq <- sapply(del$Seq, translate)
ins$aaseq <- sapply(ins$Vseq, translate)
del$aaseq <- sapply(del$Vseq, translate)
head(ins)
ins$glycs <- sapply(ins$aaseq, extractGlycs)
del$glycs <- sapply(del$aaseq, extractGlycs)
head(ins)
?pairwiseAlignment
pairwiseAlignment("ATGGTCACT", "ATGACT")
pairwiseAlignment("ATGGTCACT", "ATG---ACT")
test <- "ATG,ATCCAGCAG"
indel <- "ATG,ATCCAGCAG"
indels <- str_split(",", indel)
indels
indels <- str_split(indel, ",")
indels
indels <- str_split(indel, ",")[[1]]
indels
length(indels)
head(ins)
?substr
indels
indels[1]
grepl(ins$Seq,)
?grepl
grepl(",",ins$Seq)
which(grepl(",",ins$Seq))
ins[72,]
paste(rep("-", 20),collapse=È)
paste(rep("-", 20),collapse="")
rep("-", 20),collapse=""
rep("-", 20)
insAlign <- function(indels, pos, ancestor, seq){
i.list <- str_split(indels, ",")[[1]]
p.list <- str_split(pos, ",")[[1]]
for (idx in 1:length(i.list)){
len <- nchar(i.list[idx])
ix <- i.list[idx]
px <- p.list[idx]
ancestor <- paste0(substr(ancestor, 0, px-len), paste(rep("-", len),collapse=""), substr(ancestor,px-len+1, nchar(ancestor)))
}
nchar(ancestor) == nchar(seq)
}
ins[1,]
attach(ins)
insAlign(Seq[1], Pos[1], Vseq[1], ins.unchaged[1])
insAlign <- function(indels, pos, ancestor, seq){
i.list <- str_split(indels, ",")[[1]]
p.list <- str_split(pos, ",")[[1]]
for (idx in 1:length(i.list)){
len <- nchar(i.list[idx])
ix <- i.list[idx]
px <- as.numeric(p.list[idx])
ancestor <- paste0(substr(ancestor, 0, px-len), paste(rep("-", len),collapse=""), substr(ancestor,px-len+1, nchar(ancestor)))
}
c(ancestor, seq)
}
insAlign(Seq[1], Pos[1], Vseq[1], ins.unchaged[1])
insAlign(Seq[1], Pos[1], Vseq[1], ins.unchanged[1])
res1 <- insAlign(Seq[1], Pos[1], Vseq[1], ins.unchanged[1])
nchar(res1[1]) == nchar(res1[2])
res[1]
res1[1]
res1[2]
del[1,6]
head(del)
colnames(del)
del[1,5]
del[1,6]
grepl(",", del$Seq)
which(grepl(",", del$Seq))
del[40,]
ins[72,]
insAlign(Seq[72], Pos[72], Vseq[72], ins.unchanged[72])
del[40,]
p.list
pos
Pos
pos <- del[40,4]
pos
p.list <- str_split(pos, ",")[[1]]
p.list[1:2]
p.list[2]
idx <- 1
pos <- "16,19,24,36"
p.list <- str_split(pos, ",")[[1]]
idx <- 1
p.list[idx+1:length(p.list)]
p.list[(idx+1):length(p.list)]
p.list
as.numeric(p.list)
p.list[(idx+1):length(p.list)]
p.list <- as.numeric(p.list)
p.list[(idx+1):length(p.list)]
len <- 9
p.list[(idx+1):length(p.list)] <- p.list[(idx+1):length(p.list)] + len
p.list
delAlign <- function(indels, pos, ancestor, seq){
i.list <- str_split(indels, ",")[[1]]
p.list <- str_split(pos, ",")[[1]]
p.list <- as.numeric(p.list)
for (idx in 1:length(i.list)){
len <- nchar(i.list[idx])
ix <- i.list[idx]
px <- p.list[idx]
seq <- paste0(substr(seq, 0, px), paste(rep("-", len),collapse=""), substr(seq,px+len+1, nchar(seq)))
p.list[(idx+1):length(p.list)] <- p.list[(idx+1):length(p.list)] + len
}
c(ancestor, seq)
}
del[40,]
attach(del)
delAlign(Seq[40], Pos[40], Vseq[40], del.unchaged[40])
delAlign(Seq[40], Pos[40], Vseq[40], del.unchanged[40])
delAlign <- function(indels, pos, ancestor, seq){
i.list <- str_split(indels, ",")[[1]]
p.list <- str_split(pos, ",")[[1]]
p.list <- as.numeric(p.list)
for (idx in 1:length(i.list)){
len <- nchar(i.list[idx])
ix <- i.list[idx]
px <- p.list[idx]
seq <- paste0(substr(seq, 0, px), paste(rep("-", len),collapse=""), substr(seq,px+1, nchar(seq)))
p.list[(idx+1):length(p.list)] <- p.list[(idx+1):length(p.list)] + len
}
c(ancestor, seq)
}
delAlign(Seq[40], Pos[40], Vseq[40], del.unchanged[40])
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"),  sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), sep="\t", stringsAsFactors = F)
#ins$Pos <- ins$Pos + 1
#del$Pos <- del$Pos + 1
#ins$Seq <- sapply(ins$Seq, translate)
#del$Seq <- sapply(del$Seq, translate)
ins$glycs <- sapply(sapply(ins$Vseq, translate), extractGlycs)
del$glycs <- sapply(sapply(del$Vseq, translate), extractGlycs)
head(ins)
c(10,20,13,43)
10 %in% c(10,20,13,43)
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"),  sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), sep="\t", stringsAsFactors = F)
headers <- c("accno", "vloop", "seq", "pos", "ancestor", "tipseq")
colnames(ins) <- headers
colnames(del) <- headers
head(ins)
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"),  sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), sep="\t", stringsAsFactors = F)
headers <- c("accno", "vloop", "seq", "pos", "ancestor", "tipseq")
colnames(ins) <- headers
colnames(del) <- headers
#ins$Seq <- sapply(ins$Seq, translate)
#del$Seq <- sapply(del$Seq, translate)
ins$anc.glycs <- sapply(sapply(ins$ancestor, translate), extractGlycs)
del$anc.glycs <- sapply(sapply(del$ancestor, translate), extractGlycs)
ins$tip.glycs <- sapply(sapply(ins$tipseq, translate), extractGlycs)
del$tip.glycs <- sapply(sapply(del$tipseq, translate), extractGlycs)
head(ins)
insAlign <- function(indels, pos, ancestor, seq){
i.list <- str_split(indels, ",")[[1]]
p.list <- str_split(pos, ",")[[1]]
for (idx in 1:length(i.list)){
len <- nchar(i.list[idx])
ix <- i.list[idx]
px <- as.numeric(p.list[idx])
ancestor <- paste0(substr(ancestor, 0, px-len), paste(rep("-", len),collapse=""), substr(ancestor,px-len+1, nchar(ancestor)))
}
ancestor
}
delAlign <- function(indels, pos, ancestor, seq){
i.list <- str_split(indels, ",")[[1]]
p.list <- str_split(pos, ",")[[1]]
p.list <- as.numeric(p.list)
for (idx in 1:length(i.list)){
len <- nchar(i.list[idx])
ix <- i.list[idx]
px <- p.list[idx]
seq <- paste0(substr(seq, 0, px), paste(rep("-", len),collapse=""), substr(seq,px+1, nchar(seq)))
p.list[(idx+1):length(p.list)] <- p.list[(idx+1):length(p.list)] + len
}
seq
}
#PycharmProjects/hiv-withinhost/
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"),  sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), sep="\t", stringsAsFactors = F)
headers <- c("accno", "vloop", "seq", "pos", "ancestor", "tipseq")
colnames(ins) <- headers
colnames(del) <- headers
#ins$Seq <- sapply(ins$Seq, translate)
#del$Seq <- sapply(del$Seq, translate)
new.ins <- ins[,c(1:4)]
new.del <- del[,c(1:4)]
new.ins$ancestor <- unname(mapply(ins$seq, ins$pos, ins$ancestor, ins$tipseq))
new.ins$tipseq <- ins$tipseq
new.del$ancestor <- del$ancestor
new.del$tipseq <- unname(mapply(del$seq, del$pos, del$ancestor, del$tipseq))
new.ins$anc.glycs <- sapply(sapply(ins$ancestor, translate), extractGlycs)
new.del$anc.glycs <- sapply(sapply(del$ancestor, translate), extractGlycs)
new.ins$tip.glycs <- sapply(sapply(ins$tipseq, translate), extractGlycs)
new.del$tip.glycs <- sapply(sapply(del$tipseq, translate), extractGlycs)
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"),  sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), sep="\t", stringsAsFactors = F)
headers <- c("accno", "vloop", "seq", "pos", "ancestor", "tipseq")
colnames(ins) <- headers
colnames(del) <- headers
#ins$Seq <- sapply(ins$Seq, translate)
#del$Seq <- sapply(del$Seq, translate)
new.ins <- ins[,c(1:4)]
new.del <- del[,c(1:4)]
new.ins$ancestor <- unname(mapply(insAlign, ins$seq, ins$pos, ins$ancestor, ins$tipseq))
new.ins$tipseq <- ins$tipseq
new.del$ancestor <- del$ancestor
new.del$tipseq <- unname(mapply(delAlign, del$seq, del$pos, del$ancestor, del$tipseq))
new.ins$anc.glycs <- sapply(sapply(ins$ancestor, translate), extractGlycs)
new.del$anc.glycs <- sapply(sapply(del$ancestor, translate), extractGlycs)
new.ins$tip.glycs <- sapply(sapply(ins$tipseq, translate), extractGlycs)
new.del$tip.glycs <- sapply(sapply(del$tipseq, translate), extractGlycs)
head(new.ins)
require(ape)
total_acute <- 257
total_chronic <- 198
acute <- read.csv("~/PycharmProjects/glyc-analysis/9_glycs/acute.csv")
chronic <- read.csv("~/PycharmProjects/glyc-analysis/9_glycs/chronic.csv")
