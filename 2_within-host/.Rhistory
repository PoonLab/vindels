ins.glycs2 <- ins.glycs[ins.glycs$Seq!="",-c(3,4,5,9)]
del.glycs2 <- del.glycs[del.glycs$Seq!="",-c(3,4,5,9)]
write.csv(ins.glycs2,paste0(path, "13_nglycs/ins.csv"), sep="\t")
write.csv(del.glycs2,paste0(path, "13_nglycs/del.csv"), sep="\t")
View(iCommas)
?write.cs
?write.csv
ins.glycs2 <- ins.glycs[ins.glycs$Seq!="",-c(3,4,5,9)]
del.glycs2 <- del.glycs[del.glycs$Seq!="",-c(3,4,5,9)]
write.csv(ins.glycs2,paste0(path, "13_nglycs/ins.tsv"), sep="\t")
write.csv(del.glycs2,paste0(path, "13_nglycs/del.tsv"), sep="\t")
ins.glycs2 <- ins.glycs[ins.glycs$Seq!="",-c(3,4,5,9)]
del.glycs2 <- del.glycs[del.glycs$Seq!="",-c(3,4,5,9)]
write.table(ins.glycs2,paste0(path, "13_nglycs/ins.csv"), row.names=F, sep="\t", quote=F)
write.table(del.glycs2,paste0(path, "13_nglycs/del.csv"), row.names=F, sep="\t", quote=F)
require(ape)
require(stringr)
removeNA <- function(input, repl=""){
if (is.na(input)){
input <- repl
}
input
}
translate <- function(dna) {
require(ape)
if (nchar(dna) %% 3 != 0) {
return(NA)
}
dnabin <- as.DNAbin(DNAString(dna))
aabin <- trans(dnabin)[[1]]
aaseq <- paste(as.character(aabin),collapse="")
aaseq
}
extractGlycs <- function(aaseq){
result <- gregexpr("N[^P][ST][^P]", aaseq)[[1]] * 3 - 2
result
}
countGlycs <- function(field){
if ("," %in% field){
return(str_count(field, ",") + 1)
}else if (field == ""){
return(0)
}else{
return(1)
}
}
#CAAGGGATGGAGGAAAAAACAATACGGAGACATTCAGACCT
#PycharmProjects/hiv-withinhost/
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"), row.names=1, sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), row.names=1,sep="\t", stringsAsFactors = F)
#CAAGGGATGGAGGAAAAAACAATACGGAGACATTCAGACCT
#PycharmProjects/hiv-withinhost/
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"),  sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), sep="\t", stringsAsFactors = F)
ins
colnames(ins)
require(ape)
require(stringr)
removeNA <- function(input, repl=""){
if (is.na(input)){
input <- repl
}
input
}
translate <- function(dna) {
require(ape)
if (nchar(dna) %% 3 != 0) {
return(NA)
}
dnabin <- as.DNAbin(DNAString(dna))
aabin <- trans(dnabin)[[1]]
aaseq <- paste(as.character(aabin),collapse="")
aaseq
}
extractGlycs <- function(aaseq){
result <- gregexpr("N[^P][ST][^P]", aaseq)[[1]] * 3 - 2
result
}
countGlycs <- function(field){
if ("," %in% field){
return(str_count(field, ",") + 1)
}else if (field == ""){
return(0)
}else{
return(1)
}
}
#CAAGGGATGGAGGAAAAAACAATACGGAGACATTCAGACCT
#PycharmProjects/hiv-withinhost/
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"),  sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), sep="\t", stringsAsFactors = F)
#ins$Pos <- ins$Pos + 1
#del$Pos <- del$Pos + 1
#ins$Seq <- sapply(ins$Seq, translate)
#del$Seq <- sapply(del$Seq, translate)
ins$aaseq <- sapply(ins$Vseq, translate)
del$aaseq <- sapply(del$Vseq, translate)
head(ins)
ins$glycs <- sapply(ins$aaseq, extractGlycs)
del$glycs <- sapply(del$aaseq, extractGlycs)
head(ins)
?pairwiseAlignment
pairwiseAlignment("ATGGTCACT", "ATGACT")
pairwiseAlignment("ATGGTCACT", "ATG---ACT")
test <- "ATG,ATCCAGCAG"
indel <- "ATG,ATCCAGCAG"
indels <- str_split(",", indel)
indels
indels <- str_split(indel, ",")
indels
indels <- str_split(indel, ",")[[1]]
indels
length(indels)
head(ins)
?substr
indels
indels[1]
grepl(ins$Seq,)
?grepl
grepl(",",ins$Seq)
which(grepl(",",ins$Seq))
ins[72,]
paste(rep("-", 20),collapse=Ãˆ)
paste(rep("-", 20),collapse="")
rep("-", 20),collapse=""
rep("-", 20)
insAlign <- function(indels, pos, ancestor, seq){
i.list <- str_split(indels, ",")[[1]]
p.list <- str_split(pos, ",")[[1]]
for (idx in 1:length(i.list)){
len <- nchar(i.list[idx])
ix <- i.list[idx]
px <- p.list[idx]
ancestor <- paste0(substr(ancestor, 0, px-len), paste(rep("-", len),collapse=""), substr(ancestor,px-len+1, nchar(ancestor)))
}
nchar(ancestor) == nchar(seq)
}
ins[1,]
attach(ins)
insAlign(Seq[1], Pos[1], Vseq[1], ins.unchaged[1])
insAlign <- function(indels, pos, ancestor, seq){
i.list <- str_split(indels, ",")[[1]]
p.list <- str_split(pos, ",")[[1]]
for (idx in 1:length(i.list)){
len <- nchar(i.list[idx])
ix <- i.list[idx]
px <- as.numeric(p.list[idx])
ancestor <- paste0(substr(ancestor, 0, px-len), paste(rep("-", len),collapse=""), substr(ancestor,px-len+1, nchar(ancestor)))
}
c(ancestor, seq)
}
insAlign(Seq[1], Pos[1], Vseq[1], ins.unchaged[1])
insAlign(Seq[1], Pos[1], Vseq[1], ins.unchanged[1])
res1 <- insAlign(Seq[1], Pos[1], Vseq[1], ins.unchanged[1])
nchar(res1[1]) == nchar(res1[2])
res[1]
res1[1]
res1[2]
del[1,6]
head(del)
colnames(del)
del[1,5]
del[1,6]
grepl(",", del$Seq)
which(grepl(",", del$Seq))
del[40,]
ins[72,]
insAlign(Seq[72], Pos[72], Vseq[72], ins.unchanged[72])
del[40,]
p.list
pos
Pos
pos <- del[40,4]
pos
p.list <- str_split(pos, ",")[[1]]
p.list[1:2]
p.list[2]
idx <- 1
pos <- "16,19,24,36"
p.list <- str_split(pos, ",")[[1]]
idx <- 1
p.list[idx+1:length(p.list)]
p.list[(idx+1):length(p.list)]
p.list
as.numeric(p.list)
p.list[(idx+1):length(p.list)]
p.list <- as.numeric(p.list)
p.list[(idx+1):length(p.list)]
len <- 9
p.list[(idx+1):length(p.list)] <- p.list[(idx+1):length(p.list)] + len
p.list
delAlign <- function(indels, pos, ancestor, seq){
i.list <- str_split(indels, ",")[[1]]
p.list <- str_split(pos, ",")[[1]]
p.list <- as.numeric(p.list)
for (idx in 1:length(i.list)){
len <- nchar(i.list[idx])
ix <- i.list[idx]
px <- p.list[idx]
seq <- paste0(substr(seq, 0, px), paste(rep("-", len),collapse=""), substr(seq,px+len+1, nchar(seq)))
p.list[(idx+1):length(p.list)] <- p.list[(idx+1):length(p.list)] + len
}
c(ancestor, seq)
}
del[40,]
attach(del)
delAlign(Seq[40], Pos[40], Vseq[40], del.unchaged[40])
delAlign(Seq[40], Pos[40], Vseq[40], del.unchanged[40])
delAlign <- function(indels, pos, ancestor, seq){
i.list <- str_split(indels, ",")[[1]]
p.list <- str_split(pos, ",")[[1]]
p.list <- as.numeric(p.list)
for (idx in 1:length(i.list)){
len <- nchar(i.list[idx])
ix <- i.list[idx]
px <- p.list[idx]
seq <- paste0(substr(seq, 0, px), paste(rep("-", len),collapse=""), substr(seq,px+1, nchar(seq)))
p.list[(idx+1):length(p.list)] <- p.list[(idx+1):length(p.list)] + len
}
c(ancestor, seq)
}
delAlign(Seq[40], Pos[40], Vseq[40], del.unchanged[40])
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"),  sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), sep="\t", stringsAsFactors = F)
#ins$Pos <- ins$Pos + 1
#del$Pos <- del$Pos + 1
#ins$Seq <- sapply(ins$Seq, translate)
#del$Seq <- sapply(del$Seq, translate)
ins$glycs <- sapply(sapply(ins$Vseq, translate), extractGlycs)
del$glycs <- sapply(sapply(del$Vseq, translate), extractGlycs)
head(ins)
c(10,20,13,43)
10 %in% c(10,20,13,43)
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"),  sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), sep="\t", stringsAsFactors = F)
headers <- c("accno", "vloop", "seq", "pos", "ancestor", "tipseq")
colnames(ins) <- headers
colnames(del) <- headers
head(ins)
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"),  sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), sep="\t", stringsAsFactors = F)
headers <- c("accno", "vloop", "seq", "pos", "ancestor", "tipseq")
colnames(ins) <- headers
colnames(del) <- headers
#ins$Seq <- sapply(ins$Seq, translate)
#del$Seq <- sapply(del$Seq, translate)
ins$anc.glycs <- sapply(sapply(ins$ancestor, translate), extractGlycs)
del$anc.glycs <- sapply(sapply(del$ancestor, translate), extractGlycs)
ins$tip.glycs <- sapply(sapply(ins$tipseq, translate), extractGlycs)
del$tip.glycs <- sapply(sapply(del$tipseq, translate), extractGlycs)
head(ins)
insAlign <- function(indels, pos, ancestor, seq){
i.list <- str_split(indels, ",")[[1]]
p.list <- str_split(pos, ",")[[1]]
for (idx in 1:length(i.list)){
len <- nchar(i.list[idx])
ix <- i.list[idx]
px <- as.numeric(p.list[idx])
ancestor <- paste0(substr(ancestor, 0, px-len), paste(rep("-", len),collapse=""), substr(ancestor,px-len+1, nchar(ancestor)))
}
ancestor
}
delAlign <- function(indels, pos, ancestor, seq){
i.list <- str_split(indels, ",")[[1]]
p.list <- str_split(pos, ",")[[1]]
p.list <- as.numeric(p.list)
for (idx in 1:length(i.list)){
len <- nchar(i.list[idx])
ix <- i.list[idx]
px <- p.list[idx]
seq <- paste0(substr(seq, 0, px), paste(rep("-", len),collapse=""), substr(seq,px+1, nchar(seq)))
p.list[(idx+1):length(p.list)] <- p.list[(idx+1):length(p.list)] + len
}
seq
}
#PycharmProjects/hiv-withinhost/
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"),  sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), sep="\t", stringsAsFactors = F)
headers <- c("accno", "vloop", "seq", "pos", "ancestor", "tipseq")
colnames(ins) <- headers
colnames(del) <- headers
#ins$Seq <- sapply(ins$Seq, translate)
#del$Seq <- sapply(del$Seq, translate)
new.ins <- ins[,c(1:4)]
new.del <- del[,c(1:4)]
new.ins$ancestor <- unname(mapply(ins$seq, ins$pos, ins$ancestor, ins$tipseq))
new.ins$tipseq <- ins$tipseq
new.del$ancestor <- del$ancestor
new.del$tipseq <- unname(mapply(del$seq, del$pos, del$ancestor, del$tipseq))
new.ins$anc.glycs <- sapply(sapply(ins$ancestor, translate), extractGlycs)
new.del$anc.glycs <- sapply(sapply(del$ancestor, translate), extractGlycs)
new.ins$tip.glycs <- sapply(sapply(ins$tipseq, translate), extractGlycs)
new.del$tip.glycs <- sapply(sapply(del$tipseq, translate), extractGlycs)
path <- "~/Lio/"
ins <- read.csv(paste0(path, "13_nglycs/ins.csv"),  sep="\t", stringsAsFactors = F)
del <- read.csv(paste0(path,"13_nglycs/del.csv"), sep="\t", stringsAsFactors = F)
headers <- c("accno", "vloop", "seq", "pos", "ancestor", "tipseq")
colnames(ins) <- headers
colnames(del) <- headers
#ins$Seq <- sapply(ins$Seq, translate)
#del$Seq <- sapply(del$Seq, translate)
new.ins <- ins[,c(1:4)]
new.del <- del[,c(1:4)]
new.ins$ancestor <- unname(mapply(insAlign, ins$seq, ins$pos, ins$ancestor, ins$tipseq))
new.ins$tipseq <- ins$tipseq
new.del$ancestor <- del$ancestor
new.del$tipseq <- unname(mapply(delAlign, del$seq, del$pos, del$ancestor, del$tipseq))
new.ins$anc.glycs <- sapply(sapply(ins$ancestor, translate), extractGlycs)
new.del$anc.glycs <- sapply(sapply(del$ancestor, translate), extractGlycs)
new.ins$tip.glycs <- sapply(sapply(ins$tipseq, translate), extractGlycs)
new.del$tip.glycs <- sapply(sapply(del$tipseq, translate), extractGlycs)
head(new.ins)
require(ape)
total_acute <- 257
total_chronic <- 198
acute <- read.csv("~/PycharmProjects/glyc-analysis/9_glycs/acute.csv")
chronic <- read.csv("~/PycharmProjects/glyc-analysis/9_glycs/chronic.csv")
source("~/GitHub/vindels/2_within-host/utils.r")
path <- '~/Lio/'
ins <- read.csv(paste0(path,"10_nucleotide/ins-sep.csv"), stringsAsFactors = F, row.names = 1)
all <- read.csv(paste0(path,"10_nucleotide/ins-all.csv"), stringsAsFactors = F, row.names=1)
ins$Accno <- unname(mapply(labels, ins$Accno, ins$Pat, ins$Vloop))
all$Accno <- unname(mapply(labels, all$Accno, all$Pat, all$Vloop))
# apply inscheck
# parameters can be changed here to get different results
flanking <- unname(mapply(insCheck, indel=ins$Seq, pos=ins$Pos, vseq=ins$Vseq, wobble=1/6, offset=0))
# modify flanking data.frame
flanking <- as.data.frame(t(flanking), stringsAsFactors = F)
flanking <- cbind(ins[,c(1,2,7)], len=nchar(ins$Seq), flanking)
colnames(flanking) <- c("header","vloop","pos", "len", "indel", "vseq","before.bool", "before.offset", "before.diff", "before.seq","after.bool", "after.offset", "after.diff",  "after.seq")
flanking[,"before.bool"] <- as.logical(flanking[,"before.bool"] )
flanking[,"after.bool"] <- as.logical(flanking[,"after.bool"] )
flanking[,"before.offset"] <- as.numeric(flanking[,"before.offset"] )
flanking[,"after.offset"] <- as.numeric(flanking[,"after.offset"] )
flanking[,"before.diff"] <- as.numeric(flanking[,"before.diff"] )
flanking[,"after.diff"] <- as.numeric(flanking[,"after.diff"] )
tab <- table(flanking[flanking$before.bool | flanking$after.bool, "header"])
all$count.flanking <- 0
all[all$Accno %in% names(tab),"count.flanking"] <- tab
require(ape)
require(stringr)
source("~/GitHub/vindels/2_within-host/utils.r")
path <- '~/Lio/'
ins <- read.csv(paste0(path,"10_nucleotide/ins-sep.csv"), stringsAsFactors = F, row.names = 1)
all <- read.csv(paste0(path,"10_nucleotide/ins-all.csv"), stringsAsFactors = F, row.names=1)
ins$Accno <- unname(mapply(labels, ins$Accno, ins$Pat, ins$Vloop))
all$Accno <- unname(mapply(labels, all$Accno, all$Pat, all$Vloop))
# apply inscheck
# parameters can be changed here to get different results
flanking <- unname(mapply(insCheck, indel=ins$Seq, pos=ins$Pos, vseq=ins$Vseq, wobble=1/6, offset=0))
# modify flanking data.frame
flanking <- as.data.frame(t(flanking), stringsAsFactors = F)
flanking <- cbind(ins[,c(1,2,7)], len=nchar(ins$Seq), flanking)
colnames(flanking) <- c("header","vloop","pos", "len", "indel", "vseq","before.bool", "before.offset", "before.diff", "before.seq","after.bool", "after.offset", "after.diff",  "after.seq")
flanking[,"before.bool"] <- as.logical(flanking[,"before.bool"] )
flanking[,"after.bool"] <- as.logical(flanking[,"after.bool"] )
flanking[,"before.offset"] <- as.numeric(flanking[,"before.offset"] )
flanking[,"after.offset"] <- as.numeric(flanking[,"after.offset"] )
flanking[,"before.diff"] <- as.numeric(flanking[,"before.diff"] )
flanking[,"after.diff"] <- as.numeric(flanking[,"after.diff"] )
tab <- table(flanking[flanking$before.bool | flanking$after.bool, "header"])
all$count.flanking <- 0
all[all$Accno %in% names(tab),"count.flanking"] <- tab
-----------------------------------------------------
pll <- function(rate, count, len){
lam <- rate * len
res <- -lam + count*log(lam)
res <- res[!is.na(res)]
sum(res)
}
binomll <- function(prob, count, len){
N <- len
k <- count
p <- prob
i <- sample(5000,1)
if (i ==1){
dist <- nchar(all[all$count.flanking>0,"Seq"])
}
chs <- factorial(N) / (factorial(k) * factorial(N - k))
log(chs) +  k*log(p) +  (N - k)*log(1-p)
}
obj.f <- function(rate) -pll(rate, all$new.count, all$Vlength)
mle.result <- bbmle::mle2(obj.f, start=list(rate=1), method = "Brent", lower=1e-12, upper = 1)
pll <- function(rate, count, len){
lam <- rate * len
res <- -lam + count*log(lam)
res <- res[!is.na(res)]
sum(res)
}
mle.result <- bbmle::mle2(obj.f, start=list(rate=1), method = "Brent", lower=1e-12, upper = 1)
obj.f <- function(rate) -pll(rate, all$new.count, all$Vlength)
mle.result <- bbmle::mle2(obj.f, start=list(rate=1), method = "Brent", lower=1e-12, upper = 1)
mle.result
obj.f()
obj.f
pll
obj.f <- function(rate) -pll(rate, all$new.count, all$Vlength)
mle.result <- bbmle::mle2(obj.f, start=list(rate=1), method = "Brent", lower=1e-12, upper = 1)
require(bbmle)
obj.f <- function(rate) -pll(rate, all$new.count, all$Vlength)
mle.result <- bbmle::mle2(obj.f, start=list(rate=1), method = "Brent", lower=1e-12, upper = 1)
mle.result
obj.f(0.01)
pll
pll <- function(rate, count, len){
lam <- rate * len
res <- -lam + count*log(lam)
res <- res[!is.na(res)]
sum(res)
}
binomll <- function(prob, count, len){
N <- len
k <- count
p <- prob
i <- sample(5000,1)
if (i ==1){
dist <- nchar(all[all$count.flanking>0,"Seq"])
}
chs <- factorial(N) / (factorial(k) * factorial(N - k))
log(chs) +  k*log(p) +  (N - k)*log(1-p)
}
z <- c()
for (elem in y){
z <- c(z, obj.f2(elem))
}
all$new.count <- 0
all[all$count.flanking!=0, "new.count"] <- nchar(all[all$count.flanking!=0,"Seq"])
obj.f <- function(rate) -pll(rate, all$new.count, all$Vlength)
mle.result <- bbmle::mle2(obj.f, start=list(rate=1), method = "Brent", lower=1e-12, upper = 1)
mle.result
runif(1000)
x <- runif(1000, min=0, max=1)
plot(y=obj.f(x),x=x)
obj.f(0.01)
obj.f(x)
x <- runif(100, min=0, max=1)
obj.f(x)
x
sapply(x, obj.f)
plot(y=sapply(x, obj.f),x=x)
x <- runif(100, min=1e-7, max=1e-2)
plot(y=sapply(x, obj.f),x=x)
x <- runif(100, min=1e-9, max=1e-4)
plot(y=sapply(x, obj.f),x=x)
x <- runif(100, min=1e-9, max=1e-2)
plot(y=sapply(x, obj.f),x=x)
x <- runif(1000, min=1e-9, max=1e-2)
plot(y=sapply(x, obj.f),x=x)
y <- sapply(x, obj.f)
min(x)
min(y)
abline(x=min(x))
?line
?abline
plot(y=sapply(x, obj.f),x=x)
plot(y=sapply(x, obj.f),x=x, main="Poisson")
plot(y=sapply(x, obj.f),x=x, title="poisson")
plot(y=sapply(x, obj.f),x=x, main="Poisson")
warnings()
plot(y=sapply(x, obj.f),x=x, main="Poisson")
mle.result
coef(mle.result)
coef(mle.result)[[1]]
abline(v=coef(mle.result)[[1]])
plot(y=y,x=x, main="Poisson")
x <- runif(1000,min=1e-8,max=1e-3)
plot(y=y,x=x, main="Poisson")
x
x <- runif(1000, min=1e-8, max=1e-4)
x
y <- sapply(x, obj.f)
plot(y=y,x=x, main="Poisson")
x <- runif(1000, min=1e-8, max=1e-3)
y <- sapply(x, obj.f)
plot(y=y,x=x, main="Poisson")
x <- runif(1000, min=1e-8, max=1e-2)
y <- sapply(x, obj.f)
plot(y=y,x=x, main="Poisson")
abline(v=coef(mle.result)[[1]])
plot(y=y,x=x, main="Poisson", xlab="Rate (slips / nt)", ylab="Negative Log-Likelihood")
obj.f2 <- function(prob) -binomll(prob, all$new.count, all$Vlength)
mle.result2 <- bbmle::mle2(obj.f2, start=list(prob=1), method = "Brent", lower = 1e-12, upper=1)
obj.f2
obj.f2(0.1)
binomll <- function(prob, count, len){
N <- len
k <- count
p <- prob
i <- sample(5000,1)
if (i ==1){
dist <- nchar(all[all$count.flanking>0,"Seq"])
}
chs <- factorial(N) / (factorial(k) * factorial(N - k))
sum(log(chs) +  k*log(p) +  (N - k)*log(1-p))
}
obj.f2 <- function(prob) -binomll(prob, all$new.count, all$Vlength)
mle.result2 <- bbmle::mle2(obj.f2, start=list(prob=1), method = "Brent", lower = 1e-12, upper=1)
mle.result2
mle.result
mle.result2
x <- runif(1000,min=1e-8, max=1e-2)
y <- sapply(x, obj.f2)
plot(x=x,y=y)
plot(y=y,x=x, main="Binomial", xlab="Probability of Slip / nt", ylab="Negative Log-Likelihood")
abline(v=coef(mle.result2)[[1]])
